/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk;

import com.writer.sdk.utils.HTTPClient;
import com.writer.sdk.utils.SpeakeasyHTTPClient;

public class Writer {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://enterprise-api.writer.com",
	};
  	
    /**
     * Methods related to AI Content Detector
     */
    public AIContentDetector aiContentDetector;
    /**
     * Methods related to Billing
     */
    public Billing billing;
    /**
     * Methods related to CoWrite
     */
    public CoWrite coWrite;
    /**
     * Methods related to Completions
     */
    public Completions completions;
    /**
     * Methods related to Content
     */
    public Content content;
    /**
     * Methods related to Download the customized model
     */
    public DownloadTheCustomizedModel downloadTheCustomizedModel;
    /**
     * Methods related to Files
     */
    public Files files;
    /**
     * Methods related to Model Customization
     */
    public ModelCustomization modelCustomization;
    /**
     * Methods related to Model
     */
    public Models models;
    /**
     * Methods related to Snippets
     */
    public Snippet snippet;
    /**
     * Methods related to Styleguide
     */
    public Styleguide styleguide;
    /**
     * Methods related to Terminology
     */
    public Terminology terminology;
    /**
     * Methods related to User
     */
    public User user;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private com.writer.sdk.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.8.3";
	private String _genVersion = "2.26.3";
	java.util.Map<String, java.util.Map<String, java.util.Map<String, Object>>> _globals;
	
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private com.writer.sdk.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();
		private java.util.Map<String, java.util.Map<String, java.util.Map<String, Object>>> globals = new java.util.HashMap<String, java.util.Map<String, java.util.Map<String, Object>>>(){{
			put("parameters", new java.util.HashMap<String, java.util.Map<String, Object>>());
		}};

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(com.writer.sdk.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Allows setting the organizationId parameter for all supported operations.
		 * @param organizationId The value to set.
		 * @return The builder instance.
		 */
		public Builder setOrganizationId(Long organizationId) {
			if (!this.globals.get("parameters").containsKey("pathParam")) {
				this.globals.get("parameters").put("pathParam", new java.util.HashMap<String, Object>());
			}

			this.globals.get("parameters").get("pathParam").put("organizationId", organizationId);

			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public Writer build() throws Exception {
			return new Writer(this.client, this.security, this.serverUrl, this.params, this.globals);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private Writer(HTTPClient client, com.writer.sdk.models.shared.Security security, String serverUrl, java.util.Map<String, String> params, java.util.Map<String, java.util.Map<String, java.util.Map<String, Object>>> globals) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = com.writer.sdk.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = com.writer.sdk.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		this._globals = globals;
		
		this.aiContentDetector = new AIContentDetector(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.billing = new Billing(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.coWrite = new CoWrite(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.completions = new Completions(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.content = new Content(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.downloadTheCustomizedModel = new DownloadTheCustomizedModel(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.files = new Files(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.modelCustomization = new ModelCustomization(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.models = new Models(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.snippet = new Snippet(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.styleguide = new Styleguide(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.terminology = new Terminology(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
		
		this.user = new User(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion,
			this._globals
		);
	}
}