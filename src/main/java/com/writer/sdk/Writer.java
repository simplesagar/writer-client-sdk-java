/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.models.operations.SDKMethodInterfaces.*;
import com.writer.sdk.utils.HTTPClient;
import com.writer.sdk.utils.Hook.AfterErrorContextImpl;
import com.writer.sdk.utils.Hook.AfterSuccessContextImpl;
import com.writer.sdk.utils.Hook.BeforeRequestContextImpl;
import com.writer.sdk.utils.Retries.NonRetryableException;
import com.writer.sdk.utils.RetryConfig;
import com.writer.sdk.utils.SpeakeasyHTTPClient;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpRequest;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Writer {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://enterprise-api.writer.com",
    };

    /**
     * Methods related to Billing
     */
    private final Billing billing;

    /**
     * Methods related to AI Content Detector
     */
    private final AIContentDetector aiContentDetector;

    /**
     * Methods related to Content
     */
    private final Content content;

    /**
     * Methods related to CoWrite
     */
    private final CoWrite coWrite;

    /**
     * Methods related to Files
     */
    private final Files files;

    /**
     * Methods related to Model
     */
    private final Models models;

    /**
     * Methods related to Completions
     */
    private final Completions completions;

    /**
     * Methods related to Model Customization
     */
    private final ModelCustomization modelCustomization;

    /**
     * Methods related to Download the customized model
     */
    private final DownloadTheCustomizedModel downloadTheCustomizedModel;

    /**
     * Methods related to document
     */
    private final Document document;

    /**
     * Methods related to Snippets
     */
    private final Snippet snippet;

    /**
     * Methods related to Styleguide
     */
    private final Styleguide styleguide;

    /**
     * Methods related to Terminology
     */
    private final Terminology terminology;

    /**
     * Methods related to User
     */
    private final User user;

    /**
     * Methods related to Billing
     */
    public Billing billing() {
        return billing;
    }

    /**
     * Methods related to AI Content Detector
     */
    public AIContentDetector aiContentDetector() {
        return aiContentDetector;
    }

    /**
     * Methods related to Content
     */
    public Content content() {
        return content;
    }

    /**
     * Methods related to CoWrite
     */
    public CoWrite coWrite() {
        return coWrite;
    }

    /**
     * Methods related to Files
     */
    public Files files() {
        return files;
    }

    /**
     * Methods related to Model
     */
    public Models models() {
        return models;
    }

    /**
     * Methods related to Completions
     */
    public Completions completions() {
        return completions;
    }

    /**
     * Methods related to Model Customization
     */
    public ModelCustomization modelCustomization() {
        return modelCustomization;
    }

    /**
     * Methods related to Download the customized model
     */
    public DownloadTheCustomizedModel downloadTheCustomizedModel() {
        return downloadTheCustomizedModel;
    }

    /**
     * Methods related to document
     */
    public Document document() {
        return document;
    }

    /**
     * Methods related to Snippets
     */
    public Snippet snippet() {
        return snippet;
    }

    /**
     * Methods related to Styleguide
     */
    public Styleguide styleguide() {
        return styleguide;
    }

    /**
     * Methods related to Terminology
     */
    public Terminology terminology() {
        return terminology;
    }

    /**
     * Methods related to User
     */
    public User user() {
        return user;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests.
         * @return The builder instance.
         */
        public Builder security(com.writer.sdk.models.shared.Security security) {
            this.sdkConfiguration.securitySource = SecuritySource.of(security);
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = com.writer.sdk.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * Allows setting the organizationId parameter for all supported operations.
         *
         * @param organizationId The value to set.
         * @return The builder instance.
         */
        public Builder organizationId(long organizationId) {
            if (!this.sdkConfiguration.globals.get("parameters").containsKey("pathParam")) {
                this.sdkConfiguration.globals.get("parameters").put("pathParam", new java.util.HashMap<>());
            }

            this.sdkConfiguration.globals.get("parameters").get("pathParam").put("organizationId", organizationId);

            return this;
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public Writer build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new Writer(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Writer(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.billing = new Billing(sdkConfiguration);
        this.aiContentDetector = new AIContentDetector(sdkConfiguration);
        this.content = new Content(sdkConfiguration);
        this.coWrite = new CoWrite(sdkConfiguration);
        this.files = new Files(sdkConfiguration);
        this.models = new Models(sdkConfiguration);
        this.completions = new Completions(sdkConfiguration);
        this.modelCustomization = new ModelCustomization(sdkConfiguration);
        this.downloadTheCustomizedModel = new DownloadTheCustomizedModel(sdkConfiguration);
        this.document = new Document(sdkConfiguration);
        this.snippet = new Snippet(sdkConfiguration);
        this.styleguide = new Styleguide(sdkConfiguration);
        this.terminology = new Terminology(sdkConfiguration);
        this.user = new User(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
