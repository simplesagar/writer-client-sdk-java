/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.SpeakeasyMetadata;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ContentCheckRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private com.writer.sdk.models.shared.ContentRequest contentRequest;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organizationId")
    private Optional<? extends Long> organizationId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=teamId")
    private long teamId;

    @JsonCreator
    public ContentCheckRequest(
            com.writer.sdk.models.shared.ContentRequest contentRequest,
            Optional<? extends Long> organizationId,
            long teamId) {
        Utils.checkNotNull(contentRequest, "contentRequest");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(teamId, "teamId");
        this.contentRequest = contentRequest;
        this.organizationId = organizationId;
        this.teamId = teamId;
    }
    
    public ContentCheckRequest(
            com.writer.sdk.models.shared.ContentRequest contentRequest,
            long teamId) {
        this(contentRequest, Optional.empty(), teamId);
    }

    @JsonIgnore
    public com.writer.sdk.models.shared.ContentRequest contentRequest() {
        return contentRequest;
    }

    @JsonIgnore
    public Optional<? extends Long> organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public long teamId() {
        return teamId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ContentCheckRequest withContentRequest(com.writer.sdk.models.shared.ContentRequest contentRequest) {
        Utils.checkNotNull(contentRequest, "contentRequest");
        this.contentRequest = contentRequest;
        return this;
    }

    public ContentCheckRequest withOrganizationId(long organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    public ContentCheckRequest withOrganizationId(Optional<? extends Long> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public ContentCheckRequest withTeamId(long teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = teamId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentCheckRequest other = (ContentCheckRequest) o;
        return 
            java.util.Objects.deepEquals(this.contentRequest, other.contentRequest) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.teamId, other.teamId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            contentRequest,
            organizationId,
            teamId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentCheckRequest.class,
                "contentRequest", contentRequest,
                "organizationId", organizationId,
                "teamId", teamId);
    }
    
    public final static class Builder {
 
        private com.writer.sdk.models.shared.ContentRequest contentRequest;
 
        private Optional<? extends Long> organizationId = Optional.empty();
 
        private Long teamId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder contentRequest(com.writer.sdk.models.shared.ContentRequest contentRequest) {
            Utils.checkNotNull(contentRequest, "contentRequest");
            this.contentRequest = contentRequest;
            return this;
        }

        public Builder organizationId(long organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<? extends Long> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder teamId(long teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = teamId;
            return this;
        }
        
        public ContentCheckRequest build() {
            return new ContentCheckRequest(
                contentRequest,
                organizationId,
                teamId);
        }
    }
}

