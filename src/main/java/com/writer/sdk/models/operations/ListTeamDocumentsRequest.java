/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.SpeakeasyMetadata;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListTeamDocumentsRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<? extends Integer> limit;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<? extends Long> offset;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=organizationId")
    private Optional<? extends Long> organizationId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search")
    private Optional<? extends String> search;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortField")
    private Optional<? extends ListTeamDocumentsQueryParamSortField> sortField;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortOrder")
    private Optional<? extends ListTeamDocumentsQueryParamSortOrder> sortOrder;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=teamId")
    private long teamId;

    @JsonCreator
    public ListTeamDocumentsRequest(
            Optional<? extends Integer> limit,
            Optional<? extends Long> offset,
            Optional<? extends Long> organizationId,
            Optional<? extends String> search,
            Optional<? extends ListTeamDocumentsQueryParamSortField> sortField,
            Optional<? extends ListTeamDocumentsQueryParamSortOrder> sortOrder,
            long teamId) {
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(search, "search");
        Utils.checkNotNull(sortField, "sortField");
        Utils.checkNotNull(sortOrder, "sortOrder");
        Utils.checkNotNull(teamId, "teamId");
        this.limit = limit;
        this.offset = offset;
        this.organizationId = organizationId;
        this.search = search;
        this.sortField = sortField;
        this.sortOrder = sortOrder;
        this.teamId = teamId;
    }
    
    public ListTeamDocumentsRequest(
            long teamId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), teamId);
    }

    @JsonIgnore
    public Optional<? extends Integer> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<? extends Long> offset() {
        return offset;
    }

    @JsonIgnore
    public Optional<? extends Long> organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public Optional<? extends String> search() {
        return search;
    }

    @JsonIgnore
    public Optional<? extends ListTeamDocumentsQueryParamSortField> sortField() {
        return sortField;
    }

    @JsonIgnore
    public Optional<? extends ListTeamDocumentsQueryParamSortOrder> sortOrder() {
        return sortOrder;
    }

    @JsonIgnore
    public long teamId() {
        return teamId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListTeamDocumentsRequest withLimit(int limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public ListTeamDocumentsRequest withLimit(Optional<? extends Integer> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListTeamDocumentsRequest withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    public ListTeamDocumentsRequest withOffset(Optional<? extends Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public ListTeamDocumentsRequest withOrganizationId(long organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    public ListTeamDocumentsRequest withOrganizationId(Optional<? extends Long> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public ListTeamDocumentsRequest withSearch(String search) {
        Utils.checkNotNull(search, "search");
        this.search = Optional.ofNullable(search);
        return this;
    }

    public ListTeamDocumentsRequest withSearch(Optional<? extends String> search) {
        Utils.checkNotNull(search, "search");
        this.search = search;
        return this;
    }

    public ListTeamDocumentsRequest withSortField(ListTeamDocumentsQueryParamSortField sortField) {
        Utils.checkNotNull(sortField, "sortField");
        this.sortField = Optional.ofNullable(sortField);
        return this;
    }

    public ListTeamDocumentsRequest withSortField(Optional<? extends ListTeamDocumentsQueryParamSortField> sortField) {
        Utils.checkNotNull(sortField, "sortField");
        this.sortField = sortField;
        return this;
    }

    public ListTeamDocumentsRequest withSortOrder(ListTeamDocumentsQueryParamSortOrder sortOrder) {
        Utils.checkNotNull(sortOrder, "sortOrder");
        this.sortOrder = Optional.ofNullable(sortOrder);
        return this;
    }

    public ListTeamDocumentsRequest withSortOrder(Optional<? extends ListTeamDocumentsQueryParamSortOrder> sortOrder) {
        Utils.checkNotNull(sortOrder, "sortOrder");
        this.sortOrder = sortOrder;
        return this;
    }

    public ListTeamDocumentsRequest withTeamId(long teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = teamId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListTeamDocumentsRequest other = (ListTeamDocumentsRequest) o;
        return 
            java.util.Objects.deepEquals(this.limit, other.limit) &&
            java.util.Objects.deepEquals(this.offset, other.offset) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.search, other.search) &&
            java.util.Objects.deepEquals(this.sortField, other.sortField) &&
            java.util.Objects.deepEquals(this.sortOrder, other.sortOrder) &&
            java.util.Objects.deepEquals(this.teamId, other.teamId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            limit,
            offset,
            organizationId,
            search,
            sortField,
            sortOrder,
            teamId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListTeamDocumentsRequest.class,
                "limit", limit,
                "offset", offset,
                "organizationId", organizationId,
                "search", search,
                "sortField", sortField,
                "sortOrder", sortOrder,
                "teamId", teamId);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> limit = Optional.empty();
 
        private Optional<? extends Long> offset = Optional.empty();
 
        private Optional<? extends Long> organizationId = Optional.empty();
 
        private Optional<? extends String> search = Optional.empty();
 
        private Optional<? extends ListTeamDocumentsQueryParamSortField> sortField = Optional.empty();
 
        private Optional<? extends ListTeamDocumentsQueryParamSortOrder> sortOrder = Optional.empty();
 
        private Long teamId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder limit(int limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<? extends Integer> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<? extends Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        public Builder organizationId(long organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        public Builder organizationId(Optional<? extends Long> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder search(String search) {
            Utils.checkNotNull(search, "search");
            this.search = Optional.ofNullable(search);
            return this;
        }

        public Builder search(Optional<? extends String> search) {
            Utils.checkNotNull(search, "search");
            this.search = search;
            return this;
        }

        public Builder sortField(ListTeamDocumentsQueryParamSortField sortField) {
            Utils.checkNotNull(sortField, "sortField");
            this.sortField = Optional.ofNullable(sortField);
            return this;
        }

        public Builder sortField(Optional<? extends ListTeamDocumentsQueryParamSortField> sortField) {
            Utils.checkNotNull(sortField, "sortField");
            this.sortField = sortField;
            return this;
        }

        public Builder sortOrder(ListTeamDocumentsQueryParamSortOrder sortOrder) {
            Utils.checkNotNull(sortOrder, "sortOrder");
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        public Builder sortOrder(Optional<? extends ListTeamDocumentsQueryParamSortOrder> sortOrder) {
            Utils.checkNotNull(sortOrder, "sortOrder");
            this.sortOrder = sortOrder;
            return this;
        }

        public Builder teamId(long teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = teamId;
            return this;
        }
        
        public ListTeamDocumentsRequest build() {
            return new ListTeamDocumentsRequest(
                limit,
                offset,
                organizationId,
                search,
                sortField,
                sortOrder,
                teamId);
        }
    }
}

