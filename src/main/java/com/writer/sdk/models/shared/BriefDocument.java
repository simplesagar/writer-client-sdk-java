/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class BriefDocument {

    @JsonProperty("access")
    private Access access;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdUser")
    private Optional<? extends SimpleUser> createdUser;

    @JsonProperty("creationTime")
    private OffsetDateTime creationTime;

    @JsonProperty("id")
    private long id;

    @JsonProperty("modificationTime")
    private OffsetDateTime modificationTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedUser")
    private Optional<? extends SimpleUser> modifiedUser;

    @JsonProperty("organizationId")
    private long organizationId;

    @JsonProperty("score")
    private long score;

    @JsonProperty("teamId")
    private long teamId;

    @JsonProperty("title")
    private String title;

    @JsonCreator
    public BriefDocument(
            @JsonProperty("access") Access access,
            @JsonProperty("createdUser") Optional<? extends SimpleUser> createdUser,
            @JsonProperty("creationTime") OffsetDateTime creationTime,
            @JsonProperty("id") long id,
            @JsonProperty("modificationTime") OffsetDateTime modificationTime,
            @JsonProperty("modifiedUser") Optional<? extends SimpleUser> modifiedUser,
            @JsonProperty("organizationId") long organizationId,
            @JsonProperty("score") long score,
            @JsonProperty("teamId") long teamId,
            @JsonProperty("title") String title) {
        Utils.checkNotNull(access, "access");
        Utils.checkNotNull(createdUser, "createdUser");
        Utils.checkNotNull(creationTime, "creationTime");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(modificationTime, "modificationTime");
        Utils.checkNotNull(modifiedUser, "modifiedUser");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(score, "score");
        Utils.checkNotNull(teamId, "teamId");
        Utils.checkNotNull(title, "title");
        this.access = access;
        this.createdUser = createdUser;
        this.creationTime = creationTime;
        this.id = id;
        this.modificationTime = modificationTime;
        this.modifiedUser = modifiedUser;
        this.organizationId = organizationId;
        this.score = score;
        this.teamId = teamId;
        this.title = title;
    }
    
    public BriefDocument(
            Access access,
            OffsetDateTime creationTime,
            long id,
            OffsetDateTime modificationTime,
            long organizationId,
            long score,
            long teamId,
            String title) {
        this(access, Optional.empty(), creationTime, id, modificationTime, Optional.empty(), organizationId, score, teamId, title);
    }

    @JsonIgnore
    public Access access() {
        return access;
    }

    @JsonIgnore
    public Optional<? extends SimpleUser> createdUser() {
        return createdUser;
    }

    @JsonIgnore
    public OffsetDateTime creationTime() {
        return creationTime;
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public OffsetDateTime modificationTime() {
        return modificationTime;
    }

    @JsonIgnore
    public Optional<? extends SimpleUser> modifiedUser() {
        return modifiedUser;
    }

    @JsonIgnore
    public long organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public long score() {
        return score;
    }

    @JsonIgnore
    public long teamId() {
        return teamId;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public BriefDocument withAccess(Access access) {
        Utils.checkNotNull(access, "access");
        this.access = access;
        return this;
    }

    public BriefDocument withCreatedUser(SimpleUser createdUser) {
        Utils.checkNotNull(createdUser, "createdUser");
        this.createdUser = Optional.ofNullable(createdUser);
        return this;
    }

    public BriefDocument withCreatedUser(Optional<? extends SimpleUser> createdUser) {
        Utils.checkNotNull(createdUser, "createdUser");
        this.createdUser = createdUser;
        return this;
    }

    public BriefDocument withCreationTime(OffsetDateTime creationTime) {
        Utils.checkNotNull(creationTime, "creationTime");
        this.creationTime = creationTime;
        return this;
    }

    public BriefDocument withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public BriefDocument withModificationTime(OffsetDateTime modificationTime) {
        Utils.checkNotNull(modificationTime, "modificationTime");
        this.modificationTime = modificationTime;
        return this;
    }

    public BriefDocument withModifiedUser(SimpleUser modifiedUser) {
        Utils.checkNotNull(modifiedUser, "modifiedUser");
        this.modifiedUser = Optional.ofNullable(modifiedUser);
        return this;
    }

    public BriefDocument withModifiedUser(Optional<? extends SimpleUser> modifiedUser) {
        Utils.checkNotNull(modifiedUser, "modifiedUser");
        this.modifiedUser = modifiedUser;
        return this;
    }

    public BriefDocument withOrganizationId(long organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public BriefDocument withScore(long score) {
        Utils.checkNotNull(score, "score");
        this.score = score;
        return this;
    }

    public BriefDocument withTeamId(long teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = teamId;
        return this;
    }

    public BriefDocument withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BriefDocument other = (BriefDocument) o;
        return 
            java.util.Objects.deepEquals(this.access, other.access) &&
            java.util.Objects.deepEquals(this.createdUser, other.createdUser) &&
            java.util.Objects.deepEquals(this.creationTime, other.creationTime) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.modificationTime, other.modificationTime) &&
            java.util.Objects.deepEquals(this.modifiedUser, other.modifiedUser) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.score, other.score) &&
            java.util.Objects.deepEquals(this.teamId, other.teamId) &&
            java.util.Objects.deepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            access,
            createdUser,
            creationTime,
            id,
            modificationTime,
            modifiedUser,
            organizationId,
            score,
            teamId,
            title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BriefDocument.class,
                "access", access,
                "createdUser", createdUser,
                "creationTime", creationTime,
                "id", id,
                "modificationTime", modificationTime,
                "modifiedUser", modifiedUser,
                "organizationId", organizationId,
                "score", score,
                "teamId", teamId,
                "title", title);
    }
    
    public final static class Builder {
 
        private Access access;
 
        private Optional<? extends SimpleUser> createdUser = Optional.empty();
 
        private OffsetDateTime creationTime;
 
        private Long id;
 
        private OffsetDateTime modificationTime;
 
        private Optional<? extends SimpleUser> modifiedUser = Optional.empty();
 
        private Long organizationId;
 
        private Long score;
 
        private Long teamId;
 
        private String title;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder access(Access access) {
            Utils.checkNotNull(access, "access");
            this.access = access;
            return this;
        }

        public Builder createdUser(SimpleUser createdUser) {
            Utils.checkNotNull(createdUser, "createdUser");
            this.createdUser = Optional.ofNullable(createdUser);
            return this;
        }

        public Builder createdUser(Optional<? extends SimpleUser> createdUser) {
            Utils.checkNotNull(createdUser, "createdUser");
            this.createdUser = createdUser;
            return this;
        }

        public Builder creationTime(OffsetDateTime creationTime) {
            Utils.checkNotNull(creationTime, "creationTime");
            this.creationTime = creationTime;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder modificationTime(OffsetDateTime modificationTime) {
            Utils.checkNotNull(modificationTime, "modificationTime");
            this.modificationTime = modificationTime;
            return this;
        }

        public Builder modifiedUser(SimpleUser modifiedUser) {
            Utils.checkNotNull(modifiedUser, "modifiedUser");
            this.modifiedUser = Optional.ofNullable(modifiedUser);
            return this;
        }

        public Builder modifiedUser(Optional<? extends SimpleUser> modifiedUser) {
            Utils.checkNotNull(modifiedUser, "modifiedUser");
            this.modifiedUser = modifiedUser;
            return this;
        }

        public Builder organizationId(long organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder score(long score) {
            Utils.checkNotNull(score, "score");
            this.score = score;
            return this;
        }

        public Builder teamId(long teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = teamId;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }
        
        public BriefDocument build() {
            return new BriefDocument(
                access,
                createdUser,
                creationTime,
                id,
                modificationTime,
                modifiedUser,
                organizationId,
                score,
                teamId,
                title);
        }
    }
}

