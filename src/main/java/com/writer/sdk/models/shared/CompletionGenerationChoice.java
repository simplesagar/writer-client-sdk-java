/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CompletionGenerationChoice {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logprobs")
    private Optional<? extends CompletionGenerationChoiceLogprobs> logprobs;

    @JsonProperty("text")
    private String text;

    @JsonCreator
    public CompletionGenerationChoice(
            @JsonProperty("logprobs") Optional<? extends CompletionGenerationChoiceLogprobs> logprobs,
            @JsonProperty("text") String text) {
        Utils.checkNotNull(logprobs, "logprobs");
        Utils.checkNotNull(text, "text");
        this.logprobs = logprobs;
        this.text = text;
    }
    
    public CompletionGenerationChoice(
            String text) {
        this(Optional.empty(), text);
    }

    @JsonIgnore
    public Optional<? extends CompletionGenerationChoiceLogprobs> logprobs() {
        return logprobs;
    }

    @JsonIgnore
    public String text() {
        return text;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CompletionGenerationChoice withLogprobs(CompletionGenerationChoiceLogprobs logprobs) {
        Utils.checkNotNull(logprobs, "logprobs");
        this.logprobs = Optional.ofNullable(logprobs);
        return this;
    }

    public CompletionGenerationChoice withLogprobs(Optional<? extends CompletionGenerationChoiceLogprobs> logprobs) {
        Utils.checkNotNull(logprobs, "logprobs");
        this.logprobs = logprobs;
        return this;
    }

    public CompletionGenerationChoice withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompletionGenerationChoice other = (CompletionGenerationChoice) o;
        return 
            java.util.Objects.deepEquals(this.logprobs, other.logprobs) &&
            java.util.Objects.deepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            logprobs,
            text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompletionGenerationChoice.class,
                "logprobs", logprobs,
                "text", text);
    }
    
    public final static class Builder {
 
        private Optional<? extends CompletionGenerationChoiceLogprobs> logprobs = Optional.empty();
 
        private String text;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder logprobs(CompletionGenerationChoiceLogprobs logprobs) {
            Utils.checkNotNull(logprobs, "logprobs");
            this.logprobs = Optional.ofNullable(logprobs);
            return this;
        }

        public Builder logprobs(Optional<? extends CompletionGenerationChoiceLogprobs> logprobs) {
            Utils.checkNotNull(logprobs, "logprobs");
            this.logprobs = logprobs;
            return this;
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }
        
        public CompletionGenerationChoice build() {
            return new CompletionGenerationChoice(
                logprobs,
                text);
        }
    }
}

