/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CompletionGenerationChoiceLogprobs {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textOffset")
    private Optional<? extends java.util.List<Long>> textOffset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenLogprobs")
    private Optional<? extends java.util.List<Double>> tokenLogprobs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokens")
    private Optional<? extends java.util.List<String>> tokens;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topLogprobs")
    private Optional<? extends java.util.List<java.util.Map<String, String>>> topLogprobs;

    @JsonCreator
    public CompletionGenerationChoiceLogprobs(
            @JsonProperty("textOffset") Optional<? extends java.util.List<Long>> textOffset,
            @JsonProperty("tokenLogprobs") Optional<? extends java.util.List<Double>> tokenLogprobs,
            @JsonProperty("tokens") Optional<? extends java.util.List<String>> tokens,
            @JsonProperty("topLogprobs") Optional<? extends java.util.List<java.util.Map<String, String>>> topLogprobs) {
        Utils.checkNotNull(textOffset, "textOffset");
        Utils.checkNotNull(tokenLogprobs, "tokenLogprobs");
        Utils.checkNotNull(tokens, "tokens");
        Utils.checkNotNull(topLogprobs, "topLogprobs");
        this.textOffset = textOffset;
        this.tokenLogprobs = tokenLogprobs;
        this.tokens = tokens;
        this.topLogprobs = topLogprobs;
    }
    
    public CompletionGenerationChoiceLogprobs() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends java.util.List<Long>> textOffset() {
        return textOffset;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<Double>> tokenLogprobs() {
        return tokenLogprobs;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<String>> tokens() {
        return tokens;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<java.util.Map<String, String>>> topLogprobs() {
        return topLogprobs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CompletionGenerationChoiceLogprobs withTextOffset(java.util.List<Long> textOffset) {
        Utils.checkNotNull(textOffset, "textOffset");
        this.textOffset = Optional.ofNullable(textOffset);
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTextOffset(Optional<? extends java.util.List<Long>> textOffset) {
        Utils.checkNotNull(textOffset, "textOffset");
        this.textOffset = textOffset;
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTokenLogprobs(java.util.List<Double> tokenLogprobs) {
        Utils.checkNotNull(tokenLogprobs, "tokenLogprobs");
        this.tokenLogprobs = Optional.ofNullable(tokenLogprobs);
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTokenLogprobs(Optional<? extends java.util.List<Double>> tokenLogprobs) {
        Utils.checkNotNull(tokenLogprobs, "tokenLogprobs");
        this.tokenLogprobs = tokenLogprobs;
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTokens(java.util.List<String> tokens) {
        Utils.checkNotNull(tokens, "tokens");
        this.tokens = Optional.ofNullable(tokens);
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTokens(Optional<? extends java.util.List<String>> tokens) {
        Utils.checkNotNull(tokens, "tokens");
        this.tokens = tokens;
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTopLogprobs(java.util.List<java.util.Map<String, String>> topLogprobs) {
        Utils.checkNotNull(topLogprobs, "topLogprobs");
        this.topLogprobs = Optional.ofNullable(topLogprobs);
        return this;
    }

    public CompletionGenerationChoiceLogprobs withTopLogprobs(Optional<? extends java.util.List<java.util.Map<String, String>>> topLogprobs) {
        Utils.checkNotNull(topLogprobs, "topLogprobs");
        this.topLogprobs = topLogprobs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompletionGenerationChoiceLogprobs other = (CompletionGenerationChoiceLogprobs) o;
        return 
            java.util.Objects.deepEquals(this.textOffset, other.textOffset) &&
            java.util.Objects.deepEquals(this.tokenLogprobs, other.tokenLogprobs) &&
            java.util.Objects.deepEquals(this.tokens, other.tokens) &&
            java.util.Objects.deepEquals(this.topLogprobs, other.topLogprobs);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            textOffset,
            tokenLogprobs,
            tokens,
            topLogprobs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompletionGenerationChoiceLogprobs.class,
                "textOffset", textOffset,
                "tokenLogprobs", tokenLogprobs,
                "tokens", tokens,
                "topLogprobs", topLogprobs);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Long>> textOffset = Optional.empty();
 
        private Optional<? extends java.util.List<Double>> tokenLogprobs = Optional.empty();
 
        private Optional<? extends java.util.List<String>> tokens = Optional.empty();
 
        private Optional<? extends java.util.List<java.util.Map<String, String>>> topLogprobs = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder textOffset(java.util.List<Long> textOffset) {
            Utils.checkNotNull(textOffset, "textOffset");
            this.textOffset = Optional.ofNullable(textOffset);
            return this;
        }

        public Builder textOffset(Optional<? extends java.util.List<Long>> textOffset) {
            Utils.checkNotNull(textOffset, "textOffset");
            this.textOffset = textOffset;
            return this;
        }

        public Builder tokenLogprobs(java.util.List<Double> tokenLogprobs) {
            Utils.checkNotNull(tokenLogprobs, "tokenLogprobs");
            this.tokenLogprobs = Optional.ofNullable(tokenLogprobs);
            return this;
        }

        public Builder tokenLogprobs(Optional<? extends java.util.List<Double>> tokenLogprobs) {
            Utils.checkNotNull(tokenLogprobs, "tokenLogprobs");
            this.tokenLogprobs = tokenLogprobs;
            return this;
        }

        public Builder tokens(java.util.List<String> tokens) {
            Utils.checkNotNull(tokens, "tokens");
            this.tokens = Optional.ofNullable(tokens);
            return this;
        }

        public Builder tokens(Optional<? extends java.util.List<String>> tokens) {
            Utils.checkNotNull(tokens, "tokens");
            this.tokens = tokens;
            return this;
        }

        public Builder topLogprobs(java.util.List<java.util.Map<String, String>> topLogprobs) {
            Utils.checkNotNull(topLogprobs, "topLogprobs");
            this.topLogprobs = Optional.ofNullable(topLogprobs);
            return this;
        }

        public Builder topLogprobs(Optional<? extends java.util.List<java.util.Map<String, String>>> topLogprobs) {
            Utils.checkNotNull(topLogprobs, "topLogprobs");
            this.topLogprobs = topLogprobs;
            return this;
        }
        
        public CompletionGenerationChoiceLogprobs build() {
            return new CompletionGenerationChoiceLogprobs(
                textOffset,
                tokenLogprobs,
                tokens,
                topLogprobs);
        }
    }
}

