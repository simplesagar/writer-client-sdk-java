/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CompletionRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bestOf")
    private Optional<? extends Long> bestOf;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequencyPenalty")
    private Optional<? extends Double> frequencyPenalty;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logprobs")
    private Optional<? extends Long> logprobs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTokens")
    private Optional<? extends Long> maxTokens;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minTokens")
    private Optional<? extends Long> minTokens;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("n")
    private Optional<? extends Long> n;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("presencePenalty")
    private Optional<? extends Double> presencePenalty;

    @JsonProperty("prompt")
    private String prompt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stop")
    private Optional<? extends java.util.List<String>> stop;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    private Optional<? extends Double> temperature;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topP")
    private Optional<? extends Double> topP;

    @JsonCreator
    public CompletionRequest(
            @JsonProperty("bestOf") Optional<? extends Long> bestOf,
            @JsonProperty("frequencyPenalty") Optional<? extends Double> frequencyPenalty,
            @JsonProperty("logprobs") Optional<? extends Long> logprobs,
            @JsonProperty("maxTokens") Optional<? extends Long> maxTokens,
            @JsonProperty("minTokens") Optional<? extends Long> minTokens,
            @JsonProperty("n") Optional<? extends Long> n,
            @JsonProperty("presencePenalty") Optional<? extends Double> presencePenalty,
            @JsonProperty("prompt") String prompt,
            @JsonProperty("stop") Optional<? extends java.util.List<String>> stop,
            @JsonProperty("temperature") Optional<? extends Double> temperature,
            @JsonProperty("topP") Optional<? extends Double> topP) {
        Utils.checkNotNull(bestOf, "bestOf");
        Utils.checkNotNull(frequencyPenalty, "frequencyPenalty");
        Utils.checkNotNull(logprobs, "logprobs");
        Utils.checkNotNull(maxTokens, "maxTokens");
        Utils.checkNotNull(minTokens, "minTokens");
        Utils.checkNotNull(n, "n");
        Utils.checkNotNull(presencePenalty, "presencePenalty");
        Utils.checkNotNull(prompt, "prompt");
        Utils.checkNotNull(stop, "stop");
        Utils.checkNotNull(temperature, "temperature");
        Utils.checkNotNull(topP, "topP");
        this.bestOf = bestOf;
        this.frequencyPenalty = frequencyPenalty;
        this.logprobs = logprobs;
        this.maxTokens = maxTokens;
        this.minTokens = minTokens;
        this.n = n;
        this.presencePenalty = presencePenalty;
        this.prompt = prompt;
        this.stop = stop;
        this.temperature = temperature;
        this.topP = topP;
    }
    
    public CompletionRequest(
            String prompt) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), prompt, Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends Long> bestOf() {
        return bestOf;
    }

    @JsonIgnore
    public Optional<? extends Double> frequencyPenalty() {
        return frequencyPenalty;
    }

    @JsonIgnore
    public Optional<? extends Long> logprobs() {
        return logprobs;
    }

    @JsonIgnore
    public Optional<? extends Long> maxTokens() {
        return maxTokens;
    }

    @JsonIgnore
    public Optional<? extends Long> minTokens() {
        return minTokens;
    }

    @JsonIgnore
    public Optional<? extends Long> n() {
        return n;
    }

    @JsonIgnore
    public Optional<? extends Double> presencePenalty() {
        return presencePenalty;
    }

    @JsonIgnore
    public String prompt() {
        return prompt;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<String>> stop() {
        return stop;
    }

    @JsonIgnore
    public Optional<? extends Double> temperature() {
        return temperature;
    }

    @JsonIgnore
    public Optional<? extends Double> topP() {
        return topP;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CompletionRequest withBestOf(long bestOf) {
        Utils.checkNotNull(bestOf, "bestOf");
        this.bestOf = Optional.ofNullable(bestOf);
        return this;
    }

    public CompletionRequest withBestOf(Optional<? extends Long> bestOf) {
        Utils.checkNotNull(bestOf, "bestOf");
        this.bestOf = bestOf;
        return this;
    }

    public CompletionRequest withFrequencyPenalty(double frequencyPenalty) {
        Utils.checkNotNull(frequencyPenalty, "frequencyPenalty");
        this.frequencyPenalty = Optional.ofNullable(frequencyPenalty);
        return this;
    }

    public CompletionRequest withFrequencyPenalty(Optional<? extends Double> frequencyPenalty) {
        Utils.checkNotNull(frequencyPenalty, "frequencyPenalty");
        this.frequencyPenalty = frequencyPenalty;
        return this;
    }

    public CompletionRequest withLogprobs(long logprobs) {
        Utils.checkNotNull(logprobs, "logprobs");
        this.logprobs = Optional.ofNullable(logprobs);
        return this;
    }

    public CompletionRequest withLogprobs(Optional<? extends Long> logprobs) {
        Utils.checkNotNull(logprobs, "logprobs");
        this.logprobs = logprobs;
        return this;
    }

    public CompletionRequest withMaxTokens(long maxTokens) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        this.maxTokens = Optional.ofNullable(maxTokens);
        return this;
    }

    public CompletionRequest withMaxTokens(Optional<? extends Long> maxTokens) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        this.maxTokens = maxTokens;
        return this;
    }

    public CompletionRequest withMinTokens(long minTokens) {
        Utils.checkNotNull(minTokens, "minTokens");
        this.minTokens = Optional.ofNullable(minTokens);
        return this;
    }

    public CompletionRequest withMinTokens(Optional<? extends Long> minTokens) {
        Utils.checkNotNull(minTokens, "minTokens");
        this.minTokens = minTokens;
        return this;
    }

    public CompletionRequest withN(long n) {
        Utils.checkNotNull(n, "n");
        this.n = Optional.ofNullable(n);
        return this;
    }

    public CompletionRequest withN(Optional<? extends Long> n) {
        Utils.checkNotNull(n, "n");
        this.n = n;
        return this;
    }

    public CompletionRequest withPresencePenalty(double presencePenalty) {
        Utils.checkNotNull(presencePenalty, "presencePenalty");
        this.presencePenalty = Optional.ofNullable(presencePenalty);
        return this;
    }

    public CompletionRequest withPresencePenalty(Optional<? extends Double> presencePenalty) {
        Utils.checkNotNull(presencePenalty, "presencePenalty");
        this.presencePenalty = presencePenalty;
        return this;
    }

    public CompletionRequest withPrompt(String prompt) {
        Utils.checkNotNull(prompt, "prompt");
        this.prompt = prompt;
        return this;
    }

    public CompletionRequest withStop(java.util.List<String> stop) {
        Utils.checkNotNull(stop, "stop");
        this.stop = Optional.ofNullable(stop);
        return this;
    }

    public CompletionRequest withStop(Optional<? extends java.util.List<String>> stop) {
        Utils.checkNotNull(stop, "stop");
        this.stop = stop;
        return this;
    }

    public CompletionRequest withTemperature(double temperature) {
        Utils.checkNotNull(temperature, "temperature");
        this.temperature = Optional.ofNullable(temperature);
        return this;
    }

    public CompletionRequest withTemperature(Optional<? extends Double> temperature) {
        Utils.checkNotNull(temperature, "temperature");
        this.temperature = temperature;
        return this;
    }

    public CompletionRequest withTopP(double topP) {
        Utils.checkNotNull(topP, "topP");
        this.topP = Optional.ofNullable(topP);
        return this;
    }

    public CompletionRequest withTopP(Optional<? extends Double> topP) {
        Utils.checkNotNull(topP, "topP");
        this.topP = topP;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompletionRequest other = (CompletionRequest) o;
        return 
            java.util.Objects.deepEquals(this.bestOf, other.bestOf) &&
            java.util.Objects.deepEquals(this.frequencyPenalty, other.frequencyPenalty) &&
            java.util.Objects.deepEquals(this.logprobs, other.logprobs) &&
            java.util.Objects.deepEquals(this.maxTokens, other.maxTokens) &&
            java.util.Objects.deepEquals(this.minTokens, other.minTokens) &&
            java.util.Objects.deepEquals(this.n, other.n) &&
            java.util.Objects.deepEquals(this.presencePenalty, other.presencePenalty) &&
            java.util.Objects.deepEquals(this.prompt, other.prompt) &&
            java.util.Objects.deepEquals(this.stop, other.stop) &&
            java.util.Objects.deepEquals(this.temperature, other.temperature) &&
            java.util.Objects.deepEquals(this.topP, other.topP);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            bestOf,
            frequencyPenalty,
            logprobs,
            maxTokens,
            minTokens,
            n,
            presencePenalty,
            prompt,
            stop,
            temperature,
            topP);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompletionRequest.class,
                "bestOf", bestOf,
                "frequencyPenalty", frequencyPenalty,
                "logprobs", logprobs,
                "maxTokens", maxTokens,
                "minTokens", minTokens,
                "n", n,
                "presencePenalty", presencePenalty,
                "prompt", prompt,
                "stop", stop,
                "temperature", temperature,
                "topP", topP);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> bestOf = Optional.empty();
 
        private Optional<? extends Double> frequencyPenalty = Optional.empty();
 
        private Optional<? extends Long> logprobs = Optional.empty();
 
        private Optional<? extends Long> maxTokens = Optional.empty();
 
        private Optional<? extends Long> minTokens = Optional.empty();
 
        private Optional<? extends Long> n = Optional.empty();
 
        private Optional<? extends Double> presencePenalty = Optional.empty();
 
        private String prompt;
 
        private Optional<? extends java.util.List<String>> stop = Optional.empty();
 
        private Optional<? extends Double> temperature = Optional.empty();
 
        private Optional<? extends Double> topP = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bestOf(long bestOf) {
            Utils.checkNotNull(bestOf, "bestOf");
            this.bestOf = Optional.ofNullable(bestOf);
            return this;
        }

        public Builder bestOf(Optional<? extends Long> bestOf) {
            Utils.checkNotNull(bestOf, "bestOf");
            this.bestOf = bestOf;
            return this;
        }

        public Builder frequencyPenalty(double frequencyPenalty) {
            Utils.checkNotNull(frequencyPenalty, "frequencyPenalty");
            this.frequencyPenalty = Optional.ofNullable(frequencyPenalty);
            return this;
        }

        public Builder frequencyPenalty(Optional<? extends Double> frequencyPenalty) {
            Utils.checkNotNull(frequencyPenalty, "frequencyPenalty");
            this.frequencyPenalty = frequencyPenalty;
            return this;
        }

        public Builder logprobs(long logprobs) {
            Utils.checkNotNull(logprobs, "logprobs");
            this.logprobs = Optional.ofNullable(logprobs);
            return this;
        }

        public Builder logprobs(Optional<? extends Long> logprobs) {
            Utils.checkNotNull(logprobs, "logprobs");
            this.logprobs = logprobs;
            return this;
        }

        public Builder maxTokens(long maxTokens) {
            Utils.checkNotNull(maxTokens, "maxTokens");
            this.maxTokens = Optional.ofNullable(maxTokens);
            return this;
        }

        public Builder maxTokens(Optional<? extends Long> maxTokens) {
            Utils.checkNotNull(maxTokens, "maxTokens");
            this.maxTokens = maxTokens;
            return this;
        }

        public Builder minTokens(long minTokens) {
            Utils.checkNotNull(minTokens, "minTokens");
            this.minTokens = Optional.ofNullable(minTokens);
            return this;
        }

        public Builder minTokens(Optional<? extends Long> minTokens) {
            Utils.checkNotNull(minTokens, "minTokens");
            this.minTokens = minTokens;
            return this;
        }

        public Builder n(long n) {
            Utils.checkNotNull(n, "n");
            this.n = Optional.ofNullable(n);
            return this;
        }

        public Builder n(Optional<? extends Long> n) {
            Utils.checkNotNull(n, "n");
            this.n = n;
            return this;
        }

        public Builder presencePenalty(double presencePenalty) {
            Utils.checkNotNull(presencePenalty, "presencePenalty");
            this.presencePenalty = Optional.ofNullable(presencePenalty);
            return this;
        }

        public Builder presencePenalty(Optional<? extends Double> presencePenalty) {
            Utils.checkNotNull(presencePenalty, "presencePenalty");
            this.presencePenalty = presencePenalty;
            return this;
        }

        public Builder prompt(String prompt) {
            Utils.checkNotNull(prompt, "prompt");
            this.prompt = prompt;
            return this;
        }

        public Builder stop(java.util.List<String> stop) {
            Utils.checkNotNull(stop, "stop");
            this.stop = Optional.ofNullable(stop);
            return this;
        }

        public Builder stop(Optional<? extends java.util.List<String>> stop) {
            Utils.checkNotNull(stop, "stop");
            this.stop = stop;
            return this;
        }

        public Builder temperature(double temperature) {
            Utils.checkNotNull(temperature, "temperature");
            this.temperature = Optional.ofNullable(temperature);
            return this;
        }

        public Builder temperature(Optional<? extends Double> temperature) {
            Utils.checkNotNull(temperature, "temperature");
            this.temperature = temperature;
            return this;
        }

        public Builder topP(double topP) {
            Utils.checkNotNull(topP, "topP");
            this.topP = Optional.ofNullable(topP);
            return this;
        }

        public Builder topP(Optional<? extends Double> topP) {
            Utils.checkNotNull(topP, "topP");
            this.topP = topP;
            return this;
        }
        
        public CompletionRequest build() {
            return new CompletionRequest(
                bestOf,
                frequencyPenalty,
                logprobs,
                maxTokens,
                minTokens,
                n,
                presencePenalty,
                prompt,
                stop,
                temperature,
                topP);
        }
    }
}

