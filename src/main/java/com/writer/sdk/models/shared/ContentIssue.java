/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ContentIssue {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonProperty("from")
    private long from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends java.lang.Object> meta;

    @JsonProperty("service")
    private Service service;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suggestions")
    private Optional<? extends java.util.List<String>> suggestions;

    @JsonProperty("until")
    private long until;

    @JsonCreator
    public ContentIssue(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("from") long from,
            @JsonProperty("meta") Optional<? extends java.lang.Object> meta,
            @JsonProperty("service") Service service,
            @JsonProperty("suggestions") Optional<? extends java.util.List<String>> suggestions,
            @JsonProperty("until") long until) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(meta, "meta");
        Utils.checkNotNull(service, "service");
        Utils.checkNotNull(suggestions, "suggestions");
        Utils.checkNotNull(until, "until");
        this.description = description;
        this.from = from;
        this.meta = meta;
        this.service = service;
        this.suggestions = suggestions;
        this.until = until;
    }
    
    public ContentIssue(
            long from,
            Service service,
            long until) {
        this(Optional.empty(), from, Optional.empty(), service, Optional.empty(), until);
    }

    @JsonIgnore
    public Optional<? extends String> description() {
        return description;
    }

    @JsonIgnore
    public long from() {
        return from;
    }

    @JsonIgnore
    public Optional<? extends java.lang.Object> meta() {
        return meta;
    }

    @JsonIgnore
    public Service service() {
        return service;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<String>> suggestions() {
        return suggestions;
    }

    @JsonIgnore
    public long until() {
        return until;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ContentIssue withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public ContentIssue withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ContentIssue withFrom(long from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public ContentIssue withMeta(java.lang.Object meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }

    public ContentIssue withMeta(Optional<? extends java.lang.Object> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    public ContentIssue withService(Service service) {
        Utils.checkNotNull(service, "service");
        this.service = service;
        return this;
    }

    public ContentIssue withSuggestions(java.util.List<String> suggestions) {
        Utils.checkNotNull(suggestions, "suggestions");
        this.suggestions = Optional.ofNullable(suggestions);
        return this;
    }

    public ContentIssue withSuggestions(Optional<? extends java.util.List<String>> suggestions) {
        Utils.checkNotNull(suggestions, "suggestions");
        this.suggestions = suggestions;
        return this;
    }

    public ContentIssue withUntil(long until) {
        Utils.checkNotNull(until, "until");
        this.until = until;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentIssue other = (ContentIssue) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.meta, other.meta) &&
            java.util.Objects.deepEquals(this.service, other.service) &&
            java.util.Objects.deepEquals(this.suggestions, other.suggestions) &&
            java.util.Objects.deepEquals(this.until, other.until);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            from,
            meta,
            service,
            suggestions,
            until);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentIssue.class,
                "description", description,
                "from", from,
                "meta", meta,
                "service", service,
                "suggestions", suggestions,
                "until", until);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Long from;
 
        private Optional<? extends java.lang.Object> meta = Optional.empty();
 
        private Service service;
 
        private Optional<? extends java.util.List<String>> suggestions = Optional.empty();
 
        private Long until;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder from(long from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder meta(java.lang.Object meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public Builder meta(Optional<? extends java.lang.Object> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public Builder service(Service service) {
            Utils.checkNotNull(service, "service");
            this.service = service;
            return this;
        }

        public Builder suggestions(java.util.List<String> suggestions) {
            Utils.checkNotNull(suggestions, "suggestions");
            this.suggestions = Optional.ofNullable(suggestions);
            return this;
        }

        public Builder suggestions(Optional<? extends java.util.List<String>> suggestions) {
            Utils.checkNotNull(suggestions, "suggestions");
            this.suggestions = suggestions;
            return this;
        }

        public Builder until(long until) {
            Utils.checkNotNull(until, "until");
            this.until = until;
            return this;
        }
        
        public ContentIssue build() {
            return new ContentIssue(
                description,
                from,
                meta,
                service,
                suggestions,
                until);
        }
    }
}

