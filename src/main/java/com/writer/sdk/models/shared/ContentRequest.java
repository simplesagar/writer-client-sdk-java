/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class ContentRequest {

    @JsonProperty("content")
    private String content;

    @JsonProperty("settings")
    private ContentSettings settings;

    @JsonCreator
    public ContentRequest(
            @JsonProperty("content") String content,
            @JsonProperty("settings") ContentSettings settings) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(settings, "settings");
        this.content = content;
        this.settings = settings;
    }

    @JsonIgnore
    public String content() {
        return content;
    }

    @JsonIgnore
    public ContentSettings settings() {
        return settings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ContentRequest withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public ContentRequest withSettings(ContentSettings settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = settings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContentRequest other = (ContentRequest) o;
        return 
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.settings, other.settings);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            content,
            settings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContentRequest.class,
                "content", content,
                "settings", settings);
    }
    
    public final static class Builder {
 
        private String content;
 
        private ContentSettings settings;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder settings(ContentSettings settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }
        
        public ContentRequest build() {
            return new ContentRequest(
                content,
                settings);
        }
    }
}

