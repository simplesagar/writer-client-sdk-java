/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateTermsRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failHandling")
    private Optional<? extends FailHandling> failHandling;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("models")
    private Optional<? extends java.util.List<TermCreate>> models;

    @JsonCreator
    public CreateTermsRequest(
            @JsonProperty("failHandling") Optional<? extends FailHandling> failHandling,
            @JsonProperty("models") Optional<? extends java.util.List<TermCreate>> models) {
        Utils.checkNotNull(failHandling, "failHandling");
        Utils.checkNotNull(models, "models");
        this.failHandling = failHandling;
        this.models = models;
    }
    
    public CreateTermsRequest() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends FailHandling> failHandling() {
        return failHandling;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<TermCreate>> models() {
        return models;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateTermsRequest withFailHandling(FailHandling failHandling) {
        Utils.checkNotNull(failHandling, "failHandling");
        this.failHandling = Optional.ofNullable(failHandling);
        return this;
    }

    public CreateTermsRequest withFailHandling(Optional<? extends FailHandling> failHandling) {
        Utils.checkNotNull(failHandling, "failHandling");
        this.failHandling = failHandling;
        return this;
    }

    public CreateTermsRequest withModels(java.util.List<TermCreate> models) {
        Utils.checkNotNull(models, "models");
        this.models = Optional.ofNullable(models);
        return this;
    }

    public CreateTermsRequest withModels(Optional<? extends java.util.List<TermCreate>> models) {
        Utils.checkNotNull(models, "models");
        this.models = models;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateTermsRequest other = (CreateTermsRequest) o;
        return 
            java.util.Objects.deepEquals(this.failHandling, other.failHandling) &&
            java.util.Objects.deepEquals(this.models, other.models);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            failHandling,
            models);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateTermsRequest.class,
                "failHandling", failHandling,
                "models", models);
    }
    
    public final static class Builder {
 
        private Optional<? extends FailHandling> failHandling = Optional.empty();
 
        private Optional<? extends java.util.List<TermCreate>> models = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder failHandling(FailHandling failHandling) {
            Utils.checkNotNull(failHandling, "failHandling");
            this.failHandling = Optional.ofNullable(failHandling);
            return this;
        }

        public Builder failHandling(Optional<? extends FailHandling> failHandling) {
            Utils.checkNotNull(failHandling, "failHandling");
            this.failHandling = failHandling;
            return this;
        }

        public Builder models(java.util.List<TermCreate> models) {
            Utils.checkNotNull(models, "models");
            this.models = Optional.ofNullable(models);
            return this;
        }

        public Builder models(Optional<? extends java.util.List<TermCreate>> models) {
            Utils.checkNotNull(models, "models");
            this.models = models;
            return this;
        }
        
        public CreateTermsRequest build() {
            return new CreateTermsRequest(
                failHandling,
                models);
        }
    }
}

