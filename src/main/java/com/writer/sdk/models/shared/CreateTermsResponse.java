/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateTermsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fails")
    private Optional<? extends java.util.List<FailMessage>> fails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("models")
    private Optional<? extends java.util.List<FullTermWithUser>> models;

    @JsonCreator
    public CreateTermsResponse(
            @JsonProperty("fails") Optional<? extends java.util.List<FailMessage>> fails,
            @JsonProperty("models") Optional<? extends java.util.List<FullTermWithUser>> models) {
        Utils.checkNotNull(fails, "fails");
        Utils.checkNotNull(models, "models");
        this.fails = fails;
        this.models = models;
    }
    
    public CreateTermsResponse() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends java.util.List<FailMessage>> fails() {
        return fails;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<FullTermWithUser>> models() {
        return models;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateTermsResponse withFails(java.util.List<FailMessage> fails) {
        Utils.checkNotNull(fails, "fails");
        this.fails = Optional.ofNullable(fails);
        return this;
    }

    public CreateTermsResponse withFails(Optional<? extends java.util.List<FailMessage>> fails) {
        Utils.checkNotNull(fails, "fails");
        this.fails = fails;
        return this;
    }

    public CreateTermsResponse withModels(java.util.List<FullTermWithUser> models) {
        Utils.checkNotNull(models, "models");
        this.models = Optional.ofNullable(models);
        return this;
    }

    public CreateTermsResponse withModels(Optional<? extends java.util.List<FullTermWithUser>> models) {
        Utils.checkNotNull(models, "models");
        this.models = models;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateTermsResponse other = (CreateTermsResponse) o;
        return 
            java.util.Objects.deepEquals(this.fails, other.fails) &&
            java.util.Objects.deepEquals(this.models, other.models);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            fails,
            models);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateTermsResponse.class,
                "fails", fails,
                "models", models);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<FailMessage>> fails = Optional.empty();
 
        private Optional<? extends java.util.List<FullTermWithUser>> models = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fails(java.util.List<FailMessage> fails) {
            Utils.checkNotNull(fails, "fails");
            this.fails = Optional.ofNullable(fails);
            return this;
        }

        public Builder fails(Optional<? extends java.util.List<FailMessage>> fails) {
            Utils.checkNotNull(fails, "fails");
            this.fails = fails;
            return this;
        }

        public Builder models(java.util.List<FullTermWithUser> models) {
            Utils.checkNotNull(models, "models");
            this.models = Optional.ofNullable(models);
            return this;
        }

        public Builder models(Optional<? extends java.util.List<FullTermWithUser>> models) {
            Utils.checkNotNull(models, "models");
            this.models = models;
            return this;
        }
        
        public CreateTermsResponse build() {
            return new CreateTermsResponse(
                fails,
                models);
        }
    }
}

