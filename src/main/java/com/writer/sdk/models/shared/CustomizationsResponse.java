/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CustomizationsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customizations")
    private Optional<? extends java.util.List<ModelCustomization>> customizations;

    @JsonCreator
    public CustomizationsResponse(
            @JsonProperty("customizations") Optional<? extends java.util.List<ModelCustomization>> customizations) {
        Utils.checkNotNull(customizations, "customizations");
        this.customizations = customizations;
    }
    
    public CustomizationsResponse() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends java.util.List<ModelCustomization>> customizations() {
        return customizations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CustomizationsResponse withCustomizations(java.util.List<ModelCustomization> customizations) {
        Utils.checkNotNull(customizations, "customizations");
        this.customizations = Optional.ofNullable(customizations);
        return this;
    }

    public CustomizationsResponse withCustomizations(Optional<? extends java.util.List<ModelCustomization>> customizations) {
        Utils.checkNotNull(customizations, "customizations");
        this.customizations = customizations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomizationsResponse other = (CustomizationsResponse) o;
        return 
            java.util.Objects.deepEquals(this.customizations, other.customizations);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            customizations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomizationsResponse.class,
                "customizations", customizations);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<ModelCustomization>> customizations = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder customizations(java.util.List<ModelCustomization> customizations) {
            Utils.checkNotNull(customizations, "customizations");
            this.customizations = Optional.ofNullable(customizations);
            return this;
        }

        public Builder customizations(Optional<? extends java.util.List<ModelCustomization>> customizations) {
            Utils.checkNotNull(customizations, "customizations");
            this.customizations = customizations;
            return this;
        }
        
        public CustomizationsResponse build() {
            return new CustomizationsResponse(
                customizations);
        }
    }
}

