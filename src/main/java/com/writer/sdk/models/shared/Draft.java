/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class Draft {

    @JsonProperty("body")
    private String body;

    @JsonProperty("createdUserId")
    private long createdUserId;

    @JsonProperty("creationTime")
    private OffsetDateTime creationTime;

    @JsonProperty("deleted")
    private boolean deleted;

    @JsonProperty("documentId")
    private String documentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Long> id;

    @JsonProperty("inputs")
    private java.lang.Object inputs;

    @JsonProperty("organizationId")
    private long organizationId;

    @JsonProperty("teamId")
    private long teamId;

    @JsonProperty("templateId")
    private String templateId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonCreator
    public Draft(
            @JsonProperty("body") String body,
            @JsonProperty("createdUserId") long createdUserId,
            @JsonProperty("creationTime") OffsetDateTime creationTime,
            @JsonProperty("deleted") boolean deleted,
            @JsonProperty("documentId") String documentId,
            @JsonProperty("id") Optional<? extends Long> id,
            @JsonProperty("inputs") java.lang.Object inputs,
            @JsonProperty("organizationId") long organizationId,
            @JsonProperty("teamId") long teamId,
            @JsonProperty("templateId") String templateId,
            @JsonProperty("title") Optional<? extends String> title) {
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(createdUserId, "createdUserId");
        Utils.checkNotNull(creationTime, "creationTime");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(inputs, "inputs");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(teamId, "teamId");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(title, "title");
        this.body = body;
        this.createdUserId = createdUserId;
        this.creationTime = creationTime;
        this.deleted = deleted;
        this.documentId = documentId;
        this.id = id;
        this.inputs = inputs;
        this.organizationId = organizationId;
        this.teamId = teamId;
        this.templateId = templateId;
        this.title = title;
    }
    
    public Draft(
            String body,
            long createdUserId,
            OffsetDateTime creationTime,
            boolean deleted,
            String documentId,
            java.lang.Object inputs,
            long organizationId,
            long teamId,
            String templateId) {
        this(body, createdUserId, creationTime, deleted, documentId, Optional.empty(), inputs, organizationId, teamId, templateId, Optional.empty());
    }

    @JsonIgnore
    public String body() {
        return body;
    }

    @JsonIgnore
    public long createdUserId() {
        return createdUserId;
    }

    @JsonIgnore
    public OffsetDateTime creationTime() {
        return creationTime;
    }

    @JsonIgnore
    public boolean deleted() {
        return deleted;
    }

    @JsonIgnore
    public String documentId() {
        return documentId;
    }

    @JsonIgnore
    public Optional<? extends Long> id() {
        return id;
    }

    @JsonIgnore
    public java.lang.Object inputs() {
        return inputs;
    }

    @JsonIgnore
    public long organizationId() {
        return organizationId;
    }

    @JsonIgnore
    public long teamId() {
        return teamId;
    }

    @JsonIgnore
    public String templateId() {
        return templateId;
    }

    @JsonIgnore
    public Optional<? extends String> title() {
        return title;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Draft withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    public Draft withCreatedUserId(long createdUserId) {
        Utils.checkNotNull(createdUserId, "createdUserId");
        this.createdUserId = createdUserId;
        return this;
    }

    public Draft withCreationTime(OffsetDateTime creationTime) {
        Utils.checkNotNull(creationTime, "creationTime");
        this.creationTime = creationTime;
        return this;
    }

    public Draft withDeleted(boolean deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    public Draft withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    public Draft withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Draft withId(Optional<? extends Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Draft withInputs(java.lang.Object inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = inputs;
        return this;
    }

    public Draft withOrganizationId(long organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    public Draft withTeamId(long teamId) {
        Utils.checkNotNull(teamId, "teamId");
        this.teamId = teamId;
        return this;
    }

    public Draft withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    public Draft withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public Draft withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Draft other = (Draft) o;
        return 
            java.util.Objects.deepEquals(this.body, other.body) &&
            java.util.Objects.deepEquals(this.createdUserId, other.createdUserId) &&
            java.util.Objects.deepEquals(this.creationTime, other.creationTime) &&
            java.util.Objects.deepEquals(this.deleted, other.deleted) &&
            java.util.Objects.deepEquals(this.documentId, other.documentId) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.inputs, other.inputs) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.teamId, other.teamId) &&
            java.util.Objects.deepEquals(this.templateId, other.templateId) &&
            java.util.Objects.deepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            body,
            createdUserId,
            creationTime,
            deleted,
            documentId,
            id,
            inputs,
            organizationId,
            teamId,
            templateId,
            title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Draft.class,
                "body", body,
                "createdUserId", createdUserId,
                "creationTime", creationTime,
                "deleted", deleted,
                "documentId", documentId,
                "id", id,
                "inputs", inputs,
                "organizationId", organizationId,
                "teamId", teamId,
                "templateId", templateId,
                "title", title);
    }
    
    public final static class Builder {
 
        private String body;
 
        private Long createdUserId;
 
        private OffsetDateTime creationTime;
 
        private Boolean deleted;
 
        private String documentId;
 
        private Optional<? extends Long> id = Optional.empty();
 
        private java.lang.Object inputs;
 
        private Long organizationId;
 
        private Long teamId;
 
        private String templateId;
 
        private Optional<? extends String> title = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        public Builder createdUserId(long createdUserId) {
            Utils.checkNotNull(createdUserId, "createdUserId");
            this.createdUserId = createdUserId;
            return this;
        }

        public Builder creationTime(OffsetDateTime creationTime) {
            Utils.checkNotNull(creationTime, "creationTime");
            this.creationTime = creationTime;
            return this;
        }

        public Builder deleted(boolean deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder inputs(java.lang.Object inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = inputs;
            return this;
        }

        public Builder organizationId(long organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        public Builder teamId(long teamId) {
            Utils.checkNotNull(teamId, "teamId");
            this.teamId = teamId;
            return this;
        }

        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }
        
        public Draft build() {
            return new Draft(
                body,
                createdUserId,
                creationTime,
                deleted,
                documentId,
                id,
                inputs,
                organizationId,
                teamId,
                templateId,
                title);
        }
    }
}

