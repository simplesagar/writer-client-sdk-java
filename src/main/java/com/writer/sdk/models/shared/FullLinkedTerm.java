/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class FullLinkedTerm {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approvedTermExtension")
    private Optional<? extends ApprovedTermExtension> approvedTermExtension;

    @JsonProperty("caseSensitive")
    private boolean caseSensitive;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Long> id;

    @JsonProperty("linkedTermId")
    private long linkedTermId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pos")
    private Optional<? extends Pos> pos;

    @JsonProperty("term")
    private String term;

    @JsonProperty("termId")
    private long termId;

    @JsonCreator
    public FullLinkedTerm(
            @JsonProperty("approvedTermExtension") Optional<? extends ApprovedTermExtension> approvedTermExtension,
            @JsonProperty("caseSensitive") boolean caseSensitive,
            @JsonProperty("id") Optional<? extends Long> id,
            @JsonProperty("linkedTermId") long linkedTermId,
            @JsonProperty("pos") Optional<? extends Pos> pos,
            @JsonProperty("term") String term,
            @JsonProperty("termId") long termId) {
        Utils.checkNotNull(approvedTermExtension, "approvedTermExtension");
        Utils.checkNotNull(caseSensitive, "caseSensitive");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(linkedTermId, "linkedTermId");
        Utils.checkNotNull(pos, "pos");
        Utils.checkNotNull(term, "term");
        Utils.checkNotNull(termId, "termId");
        this.approvedTermExtension = approvedTermExtension;
        this.caseSensitive = caseSensitive;
        this.id = id;
        this.linkedTermId = linkedTermId;
        this.pos = pos;
        this.term = term;
        this.termId = termId;
    }
    
    public FullLinkedTerm(
            boolean caseSensitive,
            long linkedTermId,
            String term,
            long termId) {
        this(Optional.empty(), caseSensitive, Optional.empty(), linkedTermId, Optional.empty(), term, termId);
    }

    @JsonIgnore
    public Optional<? extends ApprovedTermExtension> approvedTermExtension() {
        return approvedTermExtension;
    }

    @JsonIgnore
    public boolean caseSensitive() {
        return caseSensitive;
    }

    @JsonIgnore
    public Optional<? extends Long> id() {
        return id;
    }

    @JsonIgnore
    public long linkedTermId() {
        return linkedTermId;
    }

    @JsonIgnore
    public Optional<? extends Pos> pos() {
        return pos;
    }

    @JsonIgnore
    public String term() {
        return term;
    }

    @JsonIgnore
    public long termId() {
        return termId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FullLinkedTerm withApprovedTermExtension(ApprovedTermExtension approvedTermExtension) {
        Utils.checkNotNull(approvedTermExtension, "approvedTermExtension");
        this.approvedTermExtension = Optional.ofNullable(approvedTermExtension);
        return this;
    }

    public FullLinkedTerm withApprovedTermExtension(Optional<? extends ApprovedTermExtension> approvedTermExtension) {
        Utils.checkNotNull(approvedTermExtension, "approvedTermExtension");
        this.approvedTermExtension = approvedTermExtension;
        return this;
    }

    public FullLinkedTerm withCaseSensitive(boolean caseSensitive) {
        Utils.checkNotNull(caseSensitive, "caseSensitive");
        this.caseSensitive = caseSensitive;
        return this;
    }

    public FullLinkedTerm withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public FullLinkedTerm withId(Optional<? extends Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public FullLinkedTerm withLinkedTermId(long linkedTermId) {
        Utils.checkNotNull(linkedTermId, "linkedTermId");
        this.linkedTermId = linkedTermId;
        return this;
    }

    public FullLinkedTerm withPos(Pos pos) {
        Utils.checkNotNull(pos, "pos");
        this.pos = Optional.ofNullable(pos);
        return this;
    }

    public FullLinkedTerm withPos(Optional<? extends Pos> pos) {
        Utils.checkNotNull(pos, "pos");
        this.pos = pos;
        return this;
    }

    public FullLinkedTerm withTerm(String term) {
        Utils.checkNotNull(term, "term");
        this.term = term;
        return this;
    }

    public FullLinkedTerm withTermId(long termId) {
        Utils.checkNotNull(termId, "termId");
        this.termId = termId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FullLinkedTerm other = (FullLinkedTerm) o;
        return 
            java.util.Objects.deepEquals(this.approvedTermExtension, other.approvedTermExtension) &&
            java.util.Objects.deepEquals(this.caseSensitive, other.caseSensitive) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.linkedTermId, other.linkedTermId) &&
            java.util.Objects.deepEquals(this.pos, other.pos) &&
            java.util.Objects.deepEquals(this.term, other.term) &&
            java.util.Objects.deepEquals(this.termId, other.termId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            approvedTermExtension,
            caseSensitive,
            id,
            linkedTermId,
            pos,
            term,
            termId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FullLinkedTerm.class,
                "approvedTermExtension", approvedTermExtension,
                "caseSensitive", caseSensitive,
                "id", id,
                "linkedTermId", linkedTermId,
                "pos", pos,
                "term", term,
                "termId", termId);
    }
    
    public final static class Builder {
 
        private Optional<? extends ApprovedTermExtension> approvedTermExtension = Optional.empty();
 
        private Boolean caseSensitive;
 
        private Optional<? extends Long> id = Optional.empty();
 
        private Long linkedTermId;
 
        private Optional<? extends Pos> pos = Optional.empty();
 
        private String term;
 
        private Long termId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder approvedTermExtension(ApprovedTermExtension approvedTermExtension) {
            Utils.checkNotNull(approvedTermExtension, "approvedTermExtension");
            this.approvedTermExtension = Optional.ofNullable(approvedTermExtension);
            return this;
        }

        public Builder approvedTermExtension(Optional<? extends ApprovedTermExtension> approvedTermExtension) {
            Utils.checkNotNull(approvedTermExtension, "approvedTermExtension");
            this.approvedTermExtension = approvedTermExtension;
            return this;
        }

        public Builder caseSensitive(boolean caseSensitive) {
            Utils.checkNotNull(caseSensitive, "caseSensitive");
            this.caseSensitive = caseSensitive;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder linkedTermId(long linkedTermId) {
            Utils.checkNotNull(linkedTermId, "linkedTermId");
            this.linkedTermId = linkedTermId;
            return this;
        }

        public Builder pos(Pos pos) {
            Utils.checkNotNull(pos, "pos");
            this.pos = Optional.ofNullable(pos);
            return this;
        }

        public Builder pos(Optional<? extends Pos> pos) {
            Utils.checkNotNull(pos, "pos");
            this.pos = pos;
            return this;
        }

        public Builder term(String term) {
            Utils.checkNotNull(term, "term");
            this.term = term;
            return this;
        }

        public Builder termId(long termId) {
            Utils.checkNotNull(termId, "termId");
            this.termId = termId;
            return this;
        }
        
        public FullLinkedTerm build() {
            return new FullLinkedTerm(
                approvedTermExtension,
                caseSensitive,
                id,
                linkedTermId,
                pos,
                term,
                termId);
        }
    }
}

