/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GenerateTemplateRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputs")
    private Optional<? extends java.util.List<MagicRequestInput>> inputs;

    @JsonProperty("templateId")
    private String templateId;

    @JsonCreator
    public GenerateTemplateRequest(
            @JsonProperty("inputs") Optional<? extends java.util.List<MagicRequestInput>> inputs,
            @JsonProperty("templateId") String templateId) {
        Utils.checkNotNull(inputs, "inputs");
        Utils.checkNotNull(templateId, "templateId");
        this.inputs = inputs;
        this.templateId = templateId;
    }
    
    public GenerateTemplateRequest(
            String templateId) {
        this(Optional.empty(), templateId);
    }

    @JsonIgnore
    public Optional<? extends java.util.List<MagicRequestInput>> inputs() {
        return inputs;
    }

    @JsonIgnore
    public String templateId() {
        return templateId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GenerateTemplateRequest withInputs(java.util.List<MagicRequestInput> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = Optional.ofNullable(inputs);
        return this;
    }

    public GenerateTemplateRequest withInputs(Optional<? extends java.util.List<MagicRequestInput>> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = inputs;
        return this;
    }

    public GenerateTemplateRequest withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenerateTemplateRequest other = (GenerateTemplateRequest) o;
        return 
            java.util.Objects.deepEquals(this.inputs, other.inputs) &&
            java.util.Objects.deepEquals(this.templateId, other.templateId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            inputs,
            templateId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenerateTemplateRequest.class,
                "inputs", inputs,
                "templateId", templateId);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<MagicRequestInput>> inputs = Optional.empty();
 
        private String templateId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder inputs(java.util.List<MagicRequestInput> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = Optional.ofNullable(inputs);
            return this;
        }

        public Builder inputs(Optional<? extends java.util.List<MagicRequestInput>> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = inputs;
            return this;
        }

        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }
        
        public GenerateTemplateRequest build() {
            return new GenerateTemplateRequest(
                inputs,
                templateId);
        }
    }
}

