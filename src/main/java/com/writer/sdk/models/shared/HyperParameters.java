/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class HyperParameters {

    @JsonProperty("numVirtualTokens")
    private long numVirtualTokens;

    @JsonCreator
    public HyperParameters(
            @JsonProperty("numVirtualTokens") long numVirtualTokens) {
        Utils.checkNotNull(numVirtualTokens, "numVirtualTokens");
        this.numVirtualTokens = numVirtualTokens;
    }

    @JsonIgnore
    public long numVirtualTokens() {
        return numVirtualTokens;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public HyperParameters withNumVirtualTokens(long numVirtualTokens) {
        Utils.checkNotNull(numVirtualTokens, "numVirtualTokens");
        this.numVirtualTokens = numVirtualTokens;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HyperParameters other = (HyperParameters) o;
        return 
            java.util.Objects.deepEquals(this.numVirtualTokens, other.numVirtualTokens);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            numVirtualTokens);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HyperParameters.class,
                "numVirtualTokens", numVirtualTokens);
    }
    
    public final static class Builder {
 
        private Long numVirtualTokens;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder numVirtualTokens(long numVirtualTokens) {
            Utils.checkNotNull(numVirtualTokens, "numVirtualTokens");
            this.numVirtualTokens = numVirtualTokens;
            return this;
        }
        
        public HyperParameters build() {
            return new HyperParameters(
                numVirtualTokens);
        }
    }
}

