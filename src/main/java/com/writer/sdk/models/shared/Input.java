/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Input {

    @JsonProperty("dynamic")
    private boolean dynamic;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("help")
    private Optional<? extends String> help;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxFields")
    private Optional<? extends Long> maxFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minFields")
    private Optional<? extends Long> minFields;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends java.util.List<String>> options;

    @JsonProperty("required")
    private boolean required;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitle")
    private Optional<? extends String> subtitle;

    @JsonProperty("type")
    private InputType type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitCopy")
    private Optional<? extends String> unitCopy;

    @JsonCreator
    public Input(
            @JsonProperty("dynamic") boolean dynamic,
            @JsonProperty("help") Optional<? extends String> help,
            @JsonProperty("maxFields") Optional<? extends Long> maxFields,
            @JsonProperty("minFields") Optional<? extends Long> minFields,
            @JsonProperty("name") String name,
            @JsonProperty("options") Optional<? extends java.util.List<String>> options,
            @JsonProperty("required") boolean required,
            @JsonProperty("subtitle") Optional<? extends String> subtitle,
            @JsonProperty("type") InputType type,
            @JsonProperty("unitCopy") Optional<? extends String> unitCopy) {
        Utils.checkNotNull(dynamic, "dynamic");
        Utils.checkNotNull(help, "help");
        Utils.checkNotNull(maxFields, "maxFields");
        Utils.checkNotNull(minFields, "minFields");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(required, "required");
        Utils.checkNotNull(subtitle, "subtitle");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(unitCopy, "unitCopy");
        this.dynamic = dynamic;
        this.help = help;
        this.maxFields = maxFields;
        this.minFields = minFields;
        this.name = name;
        this.options = options;
        this.required = required;
        this.subtitle = subtitle;
        this.type = type;
        this.unitCopy = unitCopy;
    }
    
    public Input(
            boolean dynamic,
            String name,
            boolean required,
            InputType type) {
        this(dynamic, Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), required, Optional.empty(), type, Optional.empty());
    }

    @JsonIgnore
    public boolean dynamic() {
        return dynamic;
    }

    @JsonIgnore
    public Optional<? extends String> help() {
        return help;
    }

    @JsonIgnore
    public Optional<? extends Long> maxFields() {
        return maxFields;
    }

    @JsonIgnore
    public Optional<? extends Long> minFields() {
        return minFields;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<String>> options() {
        return options;
    }

    @JsonIgnore
    public boolean required() {
        return required;
    }

    @JsonIgnore
    public Optional<? extends String> subtitle() {
        return subtitle;
    }

    @JsonIgnore
    public InputType type() {
        return type;
    }

    @JsonIgnore
    public Optional<? extends String> unitCopy() {
        return unitCopy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Input withDynamic(boolean dynamic) {
        Utils.checkNotNull(dynamic, "dynamic");
        this.dynamic = dynamic;
        return this;
    }

    public Input withHelp(String help) {
        Utils.checkNotNull(help, "help");
        this.help = Optional.ofNullable(help);
        return this;
    }

    public Input withHelp(Optional<? extends String> help) {
        Utils.checkNotNull(help, "help");
        this.help = help;
        return this;
    }

    public Input withMaxFields(long maxFields) {
        Utils.checkNotNull(maxFields, "maxFields");
        this.maxFields = Optional.ofNullable(maxFields);
        return this;
    }

    public Input withMaxFields(Optional<? extends Long> maxFields) {
        Utils.checkNotNull(maxFields, "maxFields");
        this.maxFields = maxFields;
        return this;
    }

    public Input withMinFields(long minFields) {
        Utils.checkNotNull(minFields, "minFields");
        this.minFields = Optional.ofNullable(minFields);
        return this;
    }

    public Input withMinFields(Optional<? extends Long> minFields) {
        Utils.checkNotNull(minFields, "minFields");
        this.minFields = minFields;
        return this;
    }

    public Input withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Input withOptions(java.util.List<String> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    public Input withOptions(Optional<? extends java.util.List<String>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public Input withRequired(boolean required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }

    public Input withSubtitle(String subtitle) {
        Utils.checkNotNull(subtitle, "subtitle");
        this.subtitle = Optional.ofNullable(subtitle);
        return this;
    }

    public Input withSubtitle(Optional<? extends String> subtitle) {
        Utils.checkNotNull(subtitle, "subtitle");
        this.subtitle = subtitle;
        return this;
    }

    public Input withType(InputType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Input withUnitCopy(String unitCopy) {
        Utils.checkNotNull(unitCopy, "unitCopy");
        this.unitCopy = Optional.ofNullable(unitCopy);
        return this;
    }

    public Input withUnitCopy(Optional<? extends String> unitCopy) {
        Utils.checkNotNull(unitCopy, "unitCopy");
        this.unitCopy = unitCopy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Input other = (Input) o;
        return 
            java.util.Objects.deepEquals(this.dynamic, other.dynamic) &&
            java.util.Objects.deepEquals(this.help, other.help) &&
            java.util.Objects.deepEquals(this.maxFields, other.maxFields) &&
            java.util.Objects.deepEquals(this.minFields, other.minFields) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.options, other.options) &&
            java.util.Objects.deepEquals(this.required, other.required) &&
            java.util.Objects.deepEquals(this.subtitle, other.subtitle) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.unitCopy, other.unitCopy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dynamic,
            help,
            maxFields,
            minFields,
            name,
            options,
            required,
            subtitle,
            type,
            unitCopy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Input.class,
                "dynamic", dynamic,
                "help", help,
                "maxFields", maxFields,
                "minFields", minFields,
                "name", name,
                "options", options,
                "required", required,
                "subtitle", subtitle,
                "type", type,
                "unitCopy", unitCopy);
    }
    
    public final static class Builder {
 
        private Boolean dynamic;
 
        private Optional<? extends String> help = Optional.empty();
 
        private Optional<? extends Long> maxFields = Optional.empty();
 
        private Optional<? extends Long> minFields = Optional.empty();
 
        private String name;
 
        private Optional<? extends java.util.List<String>> options = Optional.empty();
 
        private Boolean required;
 
        private Optional<? extends String> subtitle = Optional.empty();
 
        private InputType type;
 
        private Optional<? extends String> unitCopy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dynamic(boolean dynamic) {
            Utils.checkNotNull(dynamic, "dynamic");
            this.dynamic = dynamic;
            return this;
        }

        public Builder help(String help) {
            Utils.checkNotNull(help, "help");
            this.help = Optional.ofNullable(help);
            return this;
        }

        public Builder help(Optional<? extends String> help) {
            Utils.checkNotNull(help, "help");
            this.help = help;
            return this;
        }

        public Builder maxFields(long maxFields) {
            Utils.checkNotNull(maxFields, "maxFields");
            this.maxFields = Optional.ofNullable(maxFields);
            return this;
        }

        public Builder maxFields(Optional<? extends Long> maxFields) {
            Utils.checkNotNull(maxFields, "maxFields");
            this.maxFields = maxFields;
            return this;
        }

        public Builder minFields(long minFields) {
            Utils.checkNotNull(minFields, "minFields");
            this.minFields = Optional.ofNullable(minFields);
            return this;
        }

        public Builder minFields(Optional<? extends Long> minFields) {
            Utils.checkNotNull(minFields, "minFields");
            this.minFields = minFields;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder options(java.util.List<String> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends java.util.List<String>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        public Builder required(boolean required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }

        public Builder subtitle(String subtitle) {
            Utils.checkNotNull(subtitle, "subtitle");
            this.subtitle = Optional.ofNullable(subtitle);
            return this;
        }

        public Builder subtitle(Optional<? extends String> subtitle) {
            Utils.checkNotNull(subtitle, "subtitle");
            this.subtitle = subtitle;
            return this;
        }

        public Builder type(InputType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder unitCopy(String unitCopy) {
            Utils.checkNotNull(unitCopy, "unitCopy");
            this.unitCopy = Optional.ofNullable(unitCopy);
            return this;
        }

        public Builder unitCopy(Optional<? extends String> unitCopy) {
            Utils.checkNotNull(unitCopy, "unitCopy");
            this.unitCopy = unitCopy;
            return this;
        }
        
        public Input build() {
            return new Input(
                dynamic,
                help,
                maxFields,
                minFields,
                name,
                options,
                required,
                subtitle,
                type,
                unitCopy);
        }
    }
}

