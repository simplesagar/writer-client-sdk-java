/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class MagicRequestInput {

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends java.util.List<String>> value;

    @JsonCreator
    public MagicRequestInput(
            @JsonProperty("name") String name,
            @JsonProperty("value") Optional<? extends java.util.List<String>> value) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(value, "value");
        this.name = name;
        this.value = value;
    }
    
    public MagicRequestInput(
            String name) {
        this(name, Optional.empty());
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<String>> value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MagicRequestInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public MagicRequestInput withValue(java.util.List<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public MagicRequestInput withValue(Optional<? extends java.util.List<String>> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MagicRequestInput other = (MagicRequestInput) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MagicRequestInput.class,
                "name", name,
                "value", value);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<? extends java.util.List<String>> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder value(java.util.List<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends java.util.List<String>> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public MagicRequestInput build() {
            return new MagicRequestInput(
                name,
                value);
        }
    }
}

