/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class ModelCustomization {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalHyperParameters")
    private Optional<? extends HyperParameters> additionalHyperParameters;

    @JsonProperty("baseModelId")
    private String baseModelId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchSize")
    private Optional<? extends Long> batchSize;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("epochs")
    private Optional<? extends Long> epochs;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("learningRate")
    private Optional<? extends Double> learningRate;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promptTemplate")
    private Optional<? extends String> promptTemplate;

    @JsonProperty("status")
    private String status;

    @JsonProperty("trainingDatasetFileId")
    private String trainingDatasetFileId;

    @JsonProperty("updatedAt")
    private OffsetDateTime updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationDatasetFileId")
    private Optional<? extends String> validationDatasetFileId;

    @JsonCreator
    public ModelCustomization(
            @JsonProperty("additionalHyperParameters") Optional<? extends HyperParameters> additionalHyperParameters,
            @JsonProperty("baseModelId") String baseModelId,
            @JsonProperty("batchSize") Optional<? extends Long> batchSize,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("epochs") Optional<? extends Long> epochs,
            @JsonProperty("id") String id,
            @JsonProperty("learningRate") Optional<? extends Double> learningRate,
            @JsonProperty("name") String name,
            @JsonProperty("promptTemplate") Optional<? extends String> promptTemplate,
            @JsonProperty("status") String status,
            @JsonProperty("trainingDatasetFileId") String trainingDatasetFileId,
            @JsonProperty("updatedAt") OffsetDateTime updatedAt,
            @JsonProperty("validationDatasetFileId") Optional<? extends String> validationDatasetFileId) {
        Utils.checkNotNull(additionalHyperParameters, "additionalHyperParameters");
        Utils.checkNotNull(baseModelId, "baseModelId");
        Utils.checkNotNull(batchSize, "batchSize");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(epochs, "epochs");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(learningRate, "learningRate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(promptTemplate, "promptTemplate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(trainingDatasetFileId, "trainingDatasetFileId");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(validationDatasetFileId, "validationDatasetFileId");
        this.additionalHyperParameters = additionalHyperParameters;
        this.baseModelId = baseModelId;
        this.batchSize = batchSize;
        this.createdAt = createdAt;
        this.description = description;
        this.epochs = epochs;
        this.id = id;
        this.learningRate = learningRate;
        this.name = name;
        this.promptTemplate = promptTemplate;
        this.status = status;
        this.trainingDatasetFileId = trainingDatasetFileId;
        this.updatedAt = updatedAt;
        this.validationDatasetFileId = validationDatasetFileId;
    }
    
    public ModelCustomization(
            String baseModelId,
            OffsetDateTime createdAt,
            String id,
            String name,
            String status,
            String trainingDatasetFileId,
            OffsetDateTime updatedAt) {
        this(Optional.empty(), baseModelId, Optional.empty(), createdAt, Optional.empty(), Optional.empty(), id, Optional.empty(), name, Optional.empty(), status, trainingDatasetFileId, updatedAt, Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends HyperParameters> additionalHyperParameters() {
        return additionalHyperParameters;
    }

    @JsonIgnore
    public String baseModelId() {
        return baseModelId;
    }

    @JsonIgnore
    public Optional<? extends Long> batchSize() {
        return batchSize;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<? extends String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<? extends Long> epochs() {
        return epochs;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<? extends Double> learningRate() {
        return learningRate;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<? extends String> promptTemplate() {
        return promptTemplate;
    }

    @JsonIgnore
    public String status() {
        return status;
    }

    @JsonIgnore
    public String trainingDatasetFileId() {
        return trainingDatasetFileId;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<? extends String> validationDatasetFileId() {
        return validationDatasetFileId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelCustomization withAdditionalHyperParameters(HyperParameters additionalHyperParameters) {
        Utils.checkNotNull(additionalHyperParameters, "additionalHyperParameters");
        this.additionalHyperParameters = Optional.ofNullable(additionalHyperParameters);
        return this;
    }

    public ModelCustomization withAdditionalHyperParameters(Optional<? extends HyperParameters> additionalHyperParameters) {
        Utils.checkNotNull(additionalHyperParameters, "additionalHyperParameters");
        this.additionalHyperParameters = additionalHyperParameters;
        return this;
    }

    public ModelCustomization withBaseModelId(String baseModelId) {
        Utils.checkNotNull(baseModelId, "baseModelId");
        this.baseModelId = baseModelId;
        return this;
    }

    public ModelCustomization withBatchSize(long batchSize) {
        Utils.checkNotNull(batchSize, "batchSize");
        this.batchSize = Optional.ofNullable(batchSize);
        return this;
    }

    public ModelCustomization withBatchSize(Optional<? extends Long> batchSize) {
        Utils.checkNotNull(batchSize, "batchSize");
        this.batchSize = batchSize;
        return this;
    }

    public ModelCustomization withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ModelCustomization withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public ModelCustomization withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public ModelCustomization withEpochs(long epochs) {
        Utils.checkNotNull(epochs, "epochs");
        this.epochs = Optional.ofNullable(epochs);
        return this;
    }

    public ModelCustomization withEpochs(Optional<? extends Long> epochs) {
        Utils.checkNotNull(epochs, "epochs");
        this.epochs = epochs;
        return this;
    }

    public ModelCustomization withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ModelCustomization withLearningRate(double learningRate) {
        Utils.checkNotNull(learningRate, "learningRate");
        this.learningRate = Optional.ofNullable(learningRate);
        return this;
    }

    public ModelCustomization withLearningRate(Optional<? extends Double> learningRate) {
        Utils.checkNotNull(learningRate, "learningRate");
        this.learningRate = learningRate;
        return this;
    }

    public ModelCustomization withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ModelCustomization withPromptTemplate(String promptTemplate) {
        Utils.checkNotNull(promptTemplate, "promptTemplate");
        this.promptTemplate = Optional.ofNullable(promptTemplate);
        return this;
    }

    public ModelCustomization withPromptTemplate(Optional<? extends String> promptTemplate) {
        Utils.checkNotNull(promptTemplate, "promptTemplate");
        this.promptTemplate = promptTemplate;
        return this;
    }

    public ModelCustomization withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ModelCustomization withTrainingDatasetFileId(String trainingDatasetFileId) {
        Utils.checkNotNull(trainingDatasetFileId, "trainingDatasetFileId");
        this.trainingDatasetFileId = trainingDatasetFileId;
        return this;
    }

    public ModelCustomization withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public ModelCustomization withValidationDatasetFileId(String validationDatasetFileId) {
        Utils.checkNotNull(validationDatasetFileId, "validationDatasetFileId");
        this.validationDatasetFileId = Optional.ofNullable(validationDatasetFileId);
        return this;
    }

    public ModelCustomization withValidationDatasetFileId(Optional<? extends String> validationDatasetFileId) {
        Utils.checkNotNull(validationDatasetFileId, "validationDatasetFileId");
        this.validationDatasetFileId = validationDatasetFileId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelCustomization other = (ModelCustomization) o;
        return 
            java.util.Objects.deepEquals(this.additionalHyperParameters, other.additionalHyperParameters) &&
            java.util.Objects.deepEquals(this.baseModelId, other.baseModelId) &&
            java.util.Objects.deepEquals(this.batchSize, other.batchSize) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.epochs, other.epochs) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.learningRate, other.learningRate) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.promptTemplate, other.promptTemplate) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.trainingDatasetFileId, other.trainingDatasetFileId) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.validationDatasetFileId, other.validationDatasetFileId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            additionalHyperParameters,
            baseModelId,
            batchSize,
            createdAt,
            description,
            epochs,
            id,
            learningRate,
            name,
            promptTemplate,
            status,
            trainingDatasetFileId,
            updatedAt,
            validationDatasetFileId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelCustomization.class,
                "additionalHyperParameters", additionalHyperParameters,
                "baseModelId", baseModelId,
                "batchSize", batchSize,
                "createdAt", createdAt,
                "description", description,
                "epochs", epochs,
                "id", id,
                "learningRate", learningRate,
                "name", name,
                "promptTemplate", promptTemplate,
                "status", status,
                "trainingDatasetFileId", trainingDatasetFileId,
                "updatedAt", updatedAt,
                "validationDatasetFileId", validationDatasetFileId);
    }
    
    public final static class Builder {
 
        private Optional<? extends HyperParameters> additionalHyperParameters = Optional.empty();
 
        private String baseModelId;
 
        private Optional<? extends Long> batchSize = Optional.empty();
 
        private OffsetDateTime createdAt;
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends Long> epochs = Optional.empty();
 
        private String id;
 
        private Optional<? extends Double> learningRate = Optional.empty();
 
        private String name;
 
        private Optional<? extends String> promptTemplate = Optional.empty();
 
        private String status;
 
        private String trainingDatasetFileId;
 
        private OffsetDateTime updatedAt;
 
        private Optional<? extends String> validationDatasetFileId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalHyperParameters(HyperParameters additionalHyperParameters) {
            Utils.checkNotNull(additionalHyperParameters, "additionalHyperParameters");
            this.additionalHyperParameters = Optional.ofNullable(additionalHyperParameters);
            return this;
        }

        public Builder additionalHyperParameters(Optional<? extends HyperParameters> additionalHyperParameters) {
            Utils.checkNotNull(additionalHyperParameters, "additionalHyperParameters");
            this.additionalHyperParameters = additionalHyperParameters;
            return this;
        }

        public Builder baseModelId(String baseModelId) {
            Utils.checkNotNull(baseModelId, "baseModelId");
            this.baseModelId = baseModelId;
            return this;
        }

        public Builder batchSize(long batchSize) {
            Utils.checkNotNull(batchSize, "batchSize");
            this.batchSize = Optional.ofNullable(batchSize);
            return this;
        }

        public Builder batchSize(Optional<? extends Long> batchSize) {
            Utils.checkNotNull(batchSize, "batchSize");
            this.batchSize = batchSize;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder epochs(long epochs) {
            Utils.checkNotNull(epochs, "epochs");
            this.epochs = Optional.ofNullable(epochs);
            return this;
        }

        public Builder epochs(Optional<? extends Long> epochs) {
            Utils.checkNotNull(epochs, "epochs");
            this.epochs = epochs;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder learningRate(double learningRate) {
            Utils.checkNotNull(learningRate, "learningRate");
            this.learningRate = Optional.ofNullable(learningRate);
            return this;
        }

        public Builder learningRate(Optional<? extends Double> learningRate) {
            Utils.checkNotNull(learningRate, "learningRate");
            this.learningRate = learningRate;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder promptTemplate(String promptTemplate) {
            Utils.checkNotNull(promptTemplate, "promptTemplate");
            this.promptTemplate = Optional.ofNullable(promptTemplate);
            return this;
        }

        public Builder promptTemplate(Optional<? extends String> promptTemplate) {
            Utils.checkNotNull(promptTemplate, "promptTemplate");
            this.promptTemplate = promptTemplate;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder trainingDatasetFileId(String trainingDatasetFileId) {
            Utils.checkNotNull(trainingDatasetFileId, "trainingDatasetFileId");
            this.trainingDatasetFileId = trainingDatasetFileId;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder validationDatasetFileId(String validationDatasetFileId) {
            Utils.checkNotNull(validationDatasetFileId, "validationDatasetFileId");
            this.validationDatasetFileId = Optional.ofNullable(validationDatasetFileId);
            return this;
        }

        public Builder validationDatasetFileId(Optional<? extends String> validationDatasetFileId) {
            Utils.checkNotNull(validationDatasetFileId, "validationDatasetFileId");
            this.validationDatasetFileId = validationDatasetFileId;
            return this;
        }
        
        public ModelCustomization build() {
            return new ModelCustomization(
                additionalHyperParameters,
                baseModelId,
                batchSize,
                createdAt,
                description,
                epochs,
                id,
                learningRate,
                name,
                promptTemplate,
                status,
                trainingDatasetFileId,
                updatedAt,
                validationDatasetFileId);
        }
    }
}

