/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;


public class ModelFile {

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("format")
    private String format;

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonProperty("numberOfSamples")
    private long numberOfSamples;

    @JsonProperty("size")
    private long size;

    @JsonCreator
    public ModelFile(
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("format") String format,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("numberOfSamples") long numberOfSamples,
            @JsonProperty("size") long size) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(format, "format");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(numberOfSamples, "numberOfSamples");
        Utils.checkNotNull(size, "size");
        this.createdAt = createdAt;
        this.format = format;
        this.id = id;
        this.name = name;
        this.numberOfSamples = numberOfSamples;
        this.size = size;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String format() {
        return format;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public long numberOfSamples() {
        return numberOfSamples;
    }

    @JsonIgnore
    public long size() {
        return size;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModelFile withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ModelFile withFormat(String format) {
        Utils.checkNotNull(format, "format");
        this.format = format;
        return this;
    }

    public ModelFile withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ModelFile withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ModelFile withNumberOfSamples(long numberOfSamples) {
        Utils.checkNotNull(numberOfSamples, "numberOfSamples");
        this.numberOfSamples = numberOfSamples;
        return this;
    }

    public ModelFile withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModelFile other = (ModelFile) o;
        return 
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.format, other.format) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.numberOfSamples, other.numberOfSamples) &&
            java.util.Objects.deepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdAt,
            format,
            id,
            name,
            numberOfSamples,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModelFile.class,
                "createdAt", createdAt,
                "format", format,
                "id", id,
                "name", name,
                "numberOfSamples", numberOfSamples,
                "size", size);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private String format;
 
        private String id;
 
        private String name;
 
        private Long numberOfSamples;
 
        private Long size;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder format(String format) {
            Utils.checkNotNull(format, "format");
            this.format = format;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder numberOfSamples(long numberOfSamples) {
            Utils.checkNotNull(numberOfSamples, "numberOfSamples");
            this.numberOfSamples = numberOfSamples;
            return this;
        }

        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }
        
        public ModelFile build() {
            return new ModelFile(
                createdAt,
                format,
                id,
                name,
                numberOfSamples,
                size);
        }
    }
}

