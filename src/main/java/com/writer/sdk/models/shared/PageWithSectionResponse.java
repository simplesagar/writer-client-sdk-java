/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class PageWithSectionResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends String> content;

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("id")
    private long id;

    @JsonProperty("order")
    private long order;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("section")
    private Optional<? extends SectionInfo> section;

    @JsonProperty("status")
    private PageWithSectionResponseStatus status;

    @JsonProperty("title")
    private String title;

    @JsonProperty("updatedAt")
    private OffsetDateTime updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    private Optional<? extends SimpleUser> updatedBy;

    @JsonProperty("url")
    private String url;

    @JsonCreator
    public PageWithSectionResponse(
            @JsonProperty("content") Optional<? extends String> content,
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("id") long id,
            @JsonProperty("order") long order,
            @JsonProperty("section") Optional<? extends SectionInfo> section,
            @JsonProperty("status") PageWithSectionResponseStatus status,
            @JsonProperty("title") String title,
            @JsonProperty("updatedAt") OffsetDateTime updatedAt,
            @JsonProperty("updatedBy") Optional<? extends SimpleUser> updatedBy,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(section, "section");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        Utils.checkNotNull(url, "url");
        this.content = content;
        this.createdAt = createdAt;
        this.id = id;
        this.order = order;
        this.section = section;
        this.status = status;
        this.title = title;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
        this.url = url;
    }
    
    public PageWithSectionResponse(
            OffsetDateTime createdAt,
            long id,
            long order,
            PageWithSectionResponseStatus status,
            String title,
            OffsetDateTime updatedAt,
            String url) {
        this(Optional.empty(), createdAt, id, order, Optional.empty(), status, title, updatedAt, Optional.empty(), url);
    }

    @JsonIgnore
    public Optional<? extends String> content() {
        return content;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public long order() {
        return order;
    }

    @JsonIgnore
    public Optional<? extends SectionInfo> section() {
        return section;
    }

    @JsonIgnore
    public PageWithSectionResponseStatus status() {
        return status;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public OffsetDateTime updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<? extends SimpleUser> updatedBy() {
        return updatedBy;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PageWithSectionResponse withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    public PageWithSectionResponse withContent(Optional<? extends String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public PageWithSectionResponse withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public PageWithSectionResponse withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public PageWithSectionResponse withOrder(long order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    public PageWithSectionResponse withSection(SectionInfo section) {
        Utils.checkNotNull(section, "section");
        this.section = Optional.ofNullable(section);
        return this;
    }

    public PageWithSectionResponse withSection(Optional<? extends SectionInfo> section) {
        Utils.checkNotNull(section, "section");
        this.section = section;
        return this;
    }

    public PageWithSectionResponse withStatus(PageWithSectionResponseStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public PageWithSectionResponse withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public PageWithSectionResponse withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public PageWithSectionResponse withUpdatedBy(SimpleUser updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    public PageWithSectionResponse withUpdatedBy(Optional<? extends SimpleUser> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }

    public PageWithSectionResponse withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PageWithSectionResponse other = (PageWithSectionResponse) o;
        return 
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.order, other.order) &&
            java.util.Objects.deepEquals(this.section, other.section) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updatedBy, other.updatedBy) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            content,
            createdAt,
            id,
            order,
            section,
            status,
            title,
            updatedAt,
            updatedBy,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PageWithSectionResponse.class,
                "content", content,
                "createdAt", createdAt,
                "id", id,
                "order", order,
                "section", section,
                "status", status,
                "title", title,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> content = Optional.empty();
 
        private OffsetDateTime createdAt;
 
        private Long id;
 
        private Long order;
 
        private Optional<? extends SectionInfo> section = Optional.empty();
 
        private PageWithSectionResponseStatus status;
 
        private String title;
 
        private OffsetDateTime updatedAt;
 
        private Optional<? extends SimpleUser> updatedBy = Optional.empty();
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        public Builder content(Optional<? extends String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder order(long order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        public Builder section(SectionInfo section) {
            Utils.checkNotNull(section, "section");
            this.section = Optional.ofNullable(section);
            return this;
        }

        public Builder section(Optional<? extends SectionInfo> section) {
            Utils.checkNotNull(section, "section");
            this.section = section;
            return this;
        }

        public Builder status(PageWithSectionResponseStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedBy(SimpleUser updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        public Builder updatedBy(Optional<? extends SimpleUser> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public PageWithSectionResponse build() {
            return new PageWithSectionResponse(
                content,
                createdAt,
                id,
                order,
                section,
                status,
                title,
                updatedAt,
                updatedBy,
                url);
        }
    }
}

