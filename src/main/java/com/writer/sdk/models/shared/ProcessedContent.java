/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ProcessedContent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issues")
    private Optional<? extends java.util.List<ContentIssue>> issues;

    @JsonCreator
    public ProcessedContent(
            @JsonProperty("issues") Optional<? extends java.util.List<ContentIssue>> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = issues;
    }
    
    public ProcessedContent() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends java.util.List<ContentIssue>> issues() {
        return issues;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProcessedContent withIssues(java.util.List<ContentIssue> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = Optional.ofNullable(issues);
        return this;
    }

    public ProcessedContent withIssues(Optional<? extends java.util.List<ContentIssue>> issues) {
        Utils.checkNotNull(issues, "issues");
        this.issues = issues;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProcessedContent other = (ProcessedContent) o;
        return 
            java.util.Objects.deepEquals(this.issues, other.issues);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            issues);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProcessedContent.class,
                "issues", issues);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<ContentIssue>> issues = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder issues(java.util.List<ContentIssue> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = Optional.ofNullable(issues);
            return this;
        }

        public Builder issues(Optional<? extends java.util.List<ContentIssue>> issues) {
            Utils.checkNotNull(issues, "issues");
            this.issues = issues;
            return this;
        }
        
        public ProcessedContent build() {
            return new ProcessedContent(
                issues);
        }
    }
}

