/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class SectionInfo {

    @JsonProperty("id")
    private long id;

    @JsonProperty("title")
    private String title;

    @JsonProperty("url")
    private String url;

    @JsonCreator
    public SectionInfo(
            @JsonProperty("id") long id,
            @JsonProperty("title") String title,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(url, "url");
        this.id = id;
        this.title = title;
        this.url = url;
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SectionInfo withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public SectionInfo withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public SectionInfo withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SectionInfo other = (SectionInfo) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            title,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SectionInfo.class,
                "id", id,
                "title", title,
                "url", url);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private String title;
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public SectionInfo build() {
            return new SectionInfo(
                id,
                title,
                url);
        }
    }
}

