/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SimpleUser {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends String> email;

    @JsonProperty("firstName")
    private String firstName;

    @JsonProperty("id")
    private long id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastName")
    private Optional<? extends String> lastName;

    @JsonCreator
    public SimpleUser(
            @JsonProperty("email") Optional<? extends String> email,
            @JsonProperty("firstName") String firstName,
            @JsonProperty("id") long id,
            @JsonProperty("lastName") Optional<? extends String> lastName) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lastName, "lastName");
        this.email = email;
        this.firstName = firstName;
        this.id = id;
        this.lastName = lastName;
    }
    
    public SimpleUser(
            String firstName,
            long id) {
        this(Optional.empty(), firstName, id, Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends String> email() {
        return email;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public Optional<? extends String> lastName() {
        return lastName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SimpleUser withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public SimpleUser withEmail(Optional<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public SimpleUser withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public SimpleUser withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public SimpleUser withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    public SimpleUser withLastName(Optional<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimpleUser other = (SimpleUser) o;
        return 
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            email,
            firstName,
            id,
            lastName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SimpleUser.class,
                "email", email,
                "firstName", firstName,
                "id", id,
                "lastName", lastName);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> email = Optional.empty();
 
        private String firstName;
 
        private Long id;
 
        private Optional<? extends String> lastName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }
        
        public SimpleUser build() {
            return new SimpleUser(
                email,
                firstName,
                id,
                lastName);
        }
    }
}

