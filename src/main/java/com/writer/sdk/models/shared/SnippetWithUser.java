/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class SnippetWithUser {

    @JsonProperty("createdUser")
    private TerminologyUser createdUser;

    @JsonProperty("creationTime")
    private OffsetDateTime creationTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonProperty("id")
    private String id;

    @JsonProperty("modificationTime")
    private OffsetDateTime modificationTime;

    @JsonProperty("modifiedUser")
    private TerminologyUser modifiedUser;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortcut")
    private Optional<? extends String> shortcut;

    @JsonProperty("snippet")
    private String snippet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends java.util.List<SnippetTagV2>> tags;

    @JsonCreator
    public SnippetWithUser(
            @JsonProperty("createdUser") TerminologyUser createdUser,
            @JsonProperty("creationTime") OffsetDateTime creationTime,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("id") String id,
            @JsonProperty("modificationTime") OffsetDateTime modificationTime,
            @JsonProperty("modifiedUser") TerminologyUser modifiedUser,
            @JsonProperty("shortcut") Optional<? extends String> shortcut,
            @JsonProperty("snippet") String snippet,
            @JsonProperty("tags") Optional<? extends java.util.List<SnippetTagV2>> tags) {
        Utils.checkNotNull(createdUser, "createdUser");
        Utils.checkNotNull(creationTime, "creationTime");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(modificationTime, "modificationTime");
        Utils.checkNotNull(modifiedUser, "modifiedUser");
        Utils.checkNotNull(shortcut, "shortcut");
        Utils.checkNotNull(snippet, "snippet");
        Utils.checkNotNull(tags, "tags");
        this.createdUser = createdUser;
        this.creationTime = creationTime;
        this.description = description;
        this.id = id;
        this.modificationTime = modificationTime;
        this.modifiedUser = modifiedUser;
        this.shortcut = shortcut;
        this.snippet = snippet;
        this.tags = tags;
    }
    
    public SnippetWithUser(
            TerminologyUser createdUser,
            OffsetDateTime creationTime,
            String id,
            OffsetDateTime modificationTime,
            TerminologyUser modifiedUser,
            String snippet) {
        this(createdUser, creationTime, Optional.empty(), id, modificationTime, modifiedUser, Optional.empty(), snippet, Optional.empty());
    }

    @JsonIgnore
    public TerminologyUser createdUser() {
        return createdUser;
    }

    @JsonIgnore
    public OffsetDateTime creationTime() {
        return creationTime;
    }

    @JsonIgnore
    public Optional<? extends String> description() {
        return description;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public OffsetDateTime modificationTime() {
        return modificationTime;
    }

    @JsonIgnore
    public TerminologyUser modifiedUser() {
        return modifiedUser;
    }

    @JsonIgnore
    public Optional<? extends String> shortcut() {
        return shortcut;
    }

    @JsonIgnore
    public String snippet() {
        return snippet;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<SnippetTagV2>> tags() {
        return tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SnippetWithUser withCreatedUser(TerminologyUser createdUser) {
        Utils.checkNotNull(createdUser, "createdUser");
        this.createdUser = createdUser;
        return this;
    }

    public SnippetWithUser withCreationTime(OffsetDateTime creationTime) {
        Utils.checkNotNull(creationTime, "creationTime");
        this.creationTime = creationTime;
        return this;
    }

    public SnippetWithUser withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public SnippetWithUser withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public SnippetWithUser withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public SnippetWithUser withModificationTime(OffsetDateTime modificationTime) {
        Utils.checkNotNull(modificationTime, "modificationTime");
        this.modificationTime = modificationTime;
        return this;
    }

    public SnippetWithUser withModifiedUser(TerminologyUser modifiedUser) {
        Utils.checkNotNull(modifiedUser, "modifiedUser");
        this.modifiedUser = modifiedUser;
        return this;
    }

    public SnippetWithUser withShortcut(String shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = Optional.ofNullable(shortcut);
        return this;
    }

    public SnippetWithUser withShortcut(Optional<? extends String> shortcut) {
        Utils.checkNotNull(shortcut, "shortcut");
        this.shortcut = shortcut;
        return this;
    }

    public SnippetWithUser withSnippet(String snippet) {
        Utils.checkNotNull(snippet, "snippet");
        this.snippet = snippet;
        return this;
    }

    public SnippetWithUser withTags(java.util.List<SnippetTagV2> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    public SnippetWithUser withTags(Optional<? extends java.util.List<SnippetTagV2>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SnippetWithUser other = (SnippetWithUser) o;
        return 
            java.util.Objects.deepEquals(this.createdUser, other.createdUser) &&
            java.util.Objects.deepEquals(this.creationTime, other.creationTime) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.modificationTime, other.modificationTime) &&
            java.util.Objects.deepEquals(this.modifiedUser, other.modifiedUser) &&
            java.util.Objects.deepEquals(this.shortcut, other.shortcut) &&
            java.util.Objects.deepEquals(this.snippet, other.snippet) &&
            java.util.Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdUser,
            creationTime,
            description,
            id,
            modificationTime,
            modifiedUser,
            shortcut,
            snippet,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SnippetWithUser.class,
                "createdUser", createdUser,
                "creationTime", creationTime,
                "description", description,
                "id", id,
                "modificationTime", modificationTime,
                "modifiedUser", modifiedUser,
                "shortcut", shortcut,
                "snippet", snippet,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private TerminologyUser createdUser;
 
        private OffsetDateTime creationTime;
 
        private Optional<? extends String> description = Optional.empty();
 
        private String id;
 
        private OffsetDateTime modificationTime;
 
        private TerminologyUser modifiedUser;
 
        private Optional<? extends String> shortcut = Optional.empty();
 
        private String snippet;
 
        private Optional<? extends java.util.List<SnippetTagV2>> tags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdUser(TerminologyUser createdUser) {
            Utils.checkNotNull(createdUser, "createdUser");
            this.createdUser = createdUser;
            return this;
        }

        public Builder creationTime(OffsetDateTime creationTime) {
            Utils.checkNotNull(creationTime, "creationTime");
            this.creationTime = creationTime;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder modificationTime(OffsetDateTime modificationTime) {
            Utils.checkNotNull(modificationTime, "modificationTime");
            this.modificationTime = modificationTime;
            return this;
        }

        public Builder modifiedUser(TerminologyUser modifiedUser) {
            Utils.checkNotNull(modifiedUser, "modifiedUser");
            this.modifiedUser = modifiedUser;
            return this;
        }

        public Builder shortcut(String shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = Optional.ofNullable(shortcut);
            return this;
        }

        public Builder shortcut(Optional<? extends String> shortcut) {
            Utils.checkNotNull(shortcut, "shortcut");
            this.shortcut = shortcut;
            return this;
        }

        public Builder snippet(String snippet) {
            Utils.checkNotNull(snippet, "snippet");
            this.snippet = snippet;
            return this;
        }

        public Builder tags(java.util.List<SnippetTagV2> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Optional<? extends java.util.List<SnippetTagV2>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public SnippetWithUser build() {
            return new SnippetWithUser(
                createdUser,
                creationTime,
                description,
                id,
                modificationTime,
                modifiedUser,
                shortcut,
                snippet,
                tags);
        }
    }
}

