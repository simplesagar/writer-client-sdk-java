/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;


public class SubscriptionPublicResponseApi {

    @JsonProperty("createdAt")
    private OffsetDateTime createdAt;

    @JsonProperty("meta")
    private MetaData meta;

    @JsonProperty("productName")
    private ProductName productName;

    @JsonProperty("seats")
    private long seats;

    @JsonProperty("status")
    private SubscriptionPublicResponseApiStatus status;

    @JsonProperty("subscriptionId")
    private String subscriptionId;

    @JsonProperty("usage")
    private Usage usage;

    @JsonCreator
    public SubscriptionPublicResponseApi(
            @JsonProperty("createdAt") OffsetDateTime createdAt,
            @JsonProperty("meta") MetaData meta,
            @JsonProperty("productName") ProductName productName,
            @JsonProperty("seats") long seats,
            @JsonProperty("status") SubscriptionPublicResponseApiStatus status,
            @JsonProperty("subscriptionId") String subscriptionId,
            @JsonProperty("usage") Usage usage) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(meta, "meta");
        Utils.checkNotNull(productName, "productName");
        Utils.checkNotNull(seats, "seats");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subscriptionId, "subscriptionId");
        Utils.checkNotNull(usage, "usage");
        this.createdAt = createdAt;
        this.meta = meta;
        this.productName = productName;
        this.seats = seats;
        this.status = status;
        this.subscriptionId = subscriptionId;
        this.usage = usage;
    }

    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public MetaData meta() {
        return meta;
    }

    @JsonIgnore
    public ProductName productName() {
        return productName;
    }

    @JsonIgnore
    public long seats() {
        return seats;
    }

    @JsonIgnore
    public SubscriptionPublicResponseApiStatus status() {
        return status;
    }

    @JsonIgnore
    public String subscriptionId() {
        return subscriptionId;
    }

    @JsonIgnore
    public Usage usage() {
        return usage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SubscriptionPublicResponseApi withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public SubscriptionPublicResponseApi withMeta(MetaData meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    public SubscriptionPublicResponseApi withProductName(ProductName productName) {
        Utils.checkNotNull(productName, "productName");
        this.productName = productName;
        return this;
    }

    public SubscriptionPublicResponseApi withSeats(long seats) {
        Utils.checkNotNull(seats, "seats");
        this.seats = seats;
        return this;
    }

    public SubscriptionPublicResponseApi withStatus(SubscriptionPublicResponseApiStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public SubscriptionPublicResponseApi withSubscriptionId(String subscriptionId) {
        Utils.checkNotNull(subscriptionId, "subscriptionId");
        this.subscriptionId = subscriptionId;
        return this;
    }

    public SubscriptionPublicResponseApi withUsage(Usage usage) {
        Utils.checkNotNull(usage, "usage");
        this.usage = usage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscriptionPublicResponseApi other = (SubscriptionPublicResponseApi) o;
        return 
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.meta, other.meta) &&
            java.util.Objects.deepEquals(this.productName, other.productName) &&
            java.util.Objects.deepEquals(this.seats, other.seats) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.subscriptionId, other.subscriptionId) &&
            java.util.Objects.deepEquals(this.usage, other.usage);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdAt,
            meta,
            productName,
            seats,
            status,
            subscriptionId,
            usage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SubscriptionPublicResponseApi.class,
                "createdAt", createdAt,
                "meta", meta,
                "productName", productName,
                "seats", seats,
                "status", status,
                "subscriptionId", subscriptionId,
                "usage", usage);
    }
    
    public final static class Builder {
 
        private OffsetDateTime createdAt;
 
        private MetaData meta;
 
        private ProductName productName;
 
        private Long seats;
 
        private SubscriptionPublicResponseApiStatus status;
 
        private String subscriptionId;
 
        private Usage usage;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder meta(MetaData meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public Builder productName(ProductName productName) {
            Utils.checkNotNull(productName, "productName");
            this.productName = productName;
            return this;
        }

        public Builder seats(long seats) {
            Utils.checkNotNull(seats, "seats");
            this.seats = seats;
            return this;
        }

        public Builder status(SubscriptionPublicResponseApiStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            Utils.checkNotNull(subscriptionId, "subscriptionId");
            this.subscriptionId = subscriptionId;
            return this;
        }

        public Builder usage(Usage usage) {
            Utils.checkNotNull(usage, "usage");
            this.usage = usage;
            return this;
        }
        
        public SubscriptionPublicResponseApi build() {
            return new SubscriptionPublicResponseApi(
                createdAt,
                meta,
                productName,
                seats,
                status,
                subscriptionId,
                usage);
        }
    }
}

