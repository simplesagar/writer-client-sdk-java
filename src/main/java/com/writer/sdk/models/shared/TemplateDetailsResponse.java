/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class TemplateDetailsResponse {

    @JsonProperty("categoryId")
    private long categoryId;

    @JsonProperty("creationTime")
    private OffsetDateTime creationTime;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guideUrl")
    private Optional<? extends String> guideUrl;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputs")
    private Optional<? extends java.util.List<Input>> inputs;

    @JsonProperty("modificationTime")
    private OffsetDateTime modificationTime;

    @JsonProperty("name")
    private String name;

    @JsonCreator
    public TemplateDetailsResponse(
            @JsonProperty("categoryId") long categoryId,
            @JsonProperty("creationTime") OffsetDateTime creationTime,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("guideUrl") Optional<? extends String> guideUrl,
            @JsonProperty("id") String id,
            @JsonProperty("inputs") Optional<? extends java.util.List<Input>> inputs,
            @JsonProperty("modificationTime") OffsetDateTime modificationTime,
            @JsonProperty("name") String name) {
        Utils.checkNotNull(categoryId, "categoryId");
        Utils.checkNotNull(creationTime, "creationTime");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(guideUrl, "guideUrl");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(inputs, "inputs");
        Utils.checkNotNull(modificationTime, "modificationTime");
        Utils.checkNotNull(name, "name");
        this.categoryId = categoryId;
        this.creationTime = creationTime;
        this.description = description;
        this.guideUrl = guideUrl;
        this.id = id;
        this.inputs = inputs;
        this.modificationTime = modificationTime;
        this.name = name;
    }
    
    public TemplateDetailsResponse(
            long categoryId,
            OffsetDateTime creationTime,
            String id,
            OffsetDateTime modificationTime,
            String name) {
        this(categoryId, creationTime, Optional.empty(), Optional.empty(), id, Optional.empty(), modificationTime, name);
    }

    @JsonIgnore
    public long categoryId() {
        return categoryId;
    }

    @JsonIgnore
    public OffsetDateTime creationTime() {
        return creationTime;
    }

    @JsonIgnore
    public Optional<? extends String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<? extends String> guideUrl() {
        return guideUrl;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<? extends java.util.List<Input>> inputs() {
        return inputs;
    }

    @JsonIgnore
    public OffsetDateTime modificationTime() {
        return modificationTime;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TemplateDetailsResponse withCategoryId(long categoryId) {
        Utils.checkNotNull(categoryId, "categoryId");
        this.categoryId = categoryId;
        return this;
    }

    public TemplateDetailsResponse withCreationTime(OffsetDateTime creationTime) {
        Utils.checkNotNull(creationTime, "creationTime");
        this.creationTime = creationTime;
        return this;
    }

    public TemplateDetailsResponse withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public TemplateDetailsResponse withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public TemplateDetailsResponse withGuideUrl(String guideUrl) {
        Utils.checkNotNull(guideUrl, "guideUrl");
        this.guideUrl = Optional.ofNullable(guideUrl);
        return this;
    }

    public TemplateDetailsResponse withGuideUrl(Optional<? extends String> guideUrl) {
        Utils.checkNotNull(guideUrl, "guideUrl");
        this.guideUrl = guideUrl;
        return this;
    }

    public TemplateDetailsResponse withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public TemplateDetailsResponse withInputs(java.util.List<Input> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = Optional.ofNullable(inputs);
        return this;
    }

    public TemplateDetailsResponse withInputs(Optional<? extends java.util.List<Input>> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = inputs;
        return this;
    }

    public TemplateDetailsResponse withModificationTime(OffsetDateTime modificationTime) {
        Utils.checkNotNull(modificationTime, "modificationTime");
        this.modificationTime = modificationTime;
        return this;
    }

    public TemplateDetailsResponse withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TemplateDetailsResponse other = (TemplateDetailsResponse) o;
        return 
            java.util.Objects.deepEquals(this.categoryId, other.categoryId) &&
            java.util.Objects.deepEquals(this.creationTime, other.creationTime) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.guideUrl, other.guideUrl) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.inputs, other.inputs) &&
            java.util.Objects.deepEquals(this.modificationTime, other.modificationTime) &&
            java.util.Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            categoryId,
            creationTime,
            description,
            guideUrl,
            id,
            inputs,
            modificationTime,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TemplateDetailsResponse.class,
                "categoryId", categoryId,
                "creationTime", creationTime,
                "description", description,
                "guideUrl", guideUrl,
                "id", id,
                "inputs", inputs,
                "modificationTime", modificationTime,
                "name", name);
    }
    
    public final static class Builder {
 
        private Long categoryId;
 
        private OffsetDateTime creationTime;
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> guideUrl = Optional.empty();
 
        private String id;
 
        private Optional<? extends java.util.List<Input>> inputs = Optional.empty();
 
        private OffsetDateTime modificationTime;
 
        private String name;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder categoryId(long categoryId) {
            Utils.checkNotNull(categoryId, "categoryId");
            this.categoryId = categoryId;
            return this;
        }

        public Builder creationTime(OffsetDateTime creationTime) {
            Utils.checkNotNull(creationTime, "creationTime");
            this.creationTime = creationTime;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder guideUrl(String guideUrl) {
            Utils.checkNotNull(guideUrl, "guideUrl");
            this.guideUrl = Optional.ofNullable(guideUrl);
            return this;
        }

        public Builder guideUrl(Optional<? extends String> guideUrl) {
            Utils.checkNotNull(guideUrl, "guideUrl");
            this.guideUrl = guideUrl;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder inputs(java.util.List<Input> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = Optional.ofNullable(inputs);
            return this;
        }

        public Builder inputs(Optional<? extends java.util.List<Input>> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = inputs;
            return this;
        }

        public Builder modificationTime(OffsetDateTime modificationTime) {
            Utils.checkNotNull(modificationTime, "modificationTime");
            this.modificationTime = modificationTime;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public TemplateDetailsResponse build() {
            return new TemplateDetailsResponse(
                categoryId,
                creationTime,
                description,
                guideUrl,
                id,
                inputs,
                modificationTime,
                name);
        }
    }
}

