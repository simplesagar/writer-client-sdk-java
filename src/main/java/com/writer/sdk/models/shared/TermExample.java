/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.writer.sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.writer.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class TermExample {

    @JsonProperty("example")
    private String example;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Long> id;

    @JsonProperty("termBankId")
    private long termBankId;

    @JsonProperty("termId")
    private long termId;

    @JsonProperty("type")
    private TermExampleType type;

    @JsonCreator
    public TermExample(
            @JsonProperty("example") String example,
            @JsonProperty("id") Optional<? extends Long> id,
            @JsonProperty("termBankId") long termBankId,
            @JsonProperty("termId") long termId,
            @JsonProperty("type") TermExampleType type) {
        Utils.checkNotNull(example, "example");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(termBankId, "termBankId");
        Utils.checkNotNull(termId, "termId");
        Utils.checkNotNull(type, "type");
        this.example = example;
        this.id = id;
        this.termBankId = termBankId;
        this.termId = termId;
        this.type = type;
    }
    
    public TermExample(
            String example,
            long termBankId,
            long termId,
            TermExampleType type) {
        this(example, Optional.empty(), termBankId, termId, type);
    }

    @JsonIgnore
    public String example() {
        return example;
    }

    @JsonIgnore
    public Optional<? extends Long> id() {
        return id;
    }

    @JsonIgnore
    public long termBankId() {
        return termBankId;
    }

    @JsonIgnore
    public long termId() {
        return termId;
    }

    @JsonIgnore
    public TermExampleType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TermExample withExample(String example) {
        Utils.checkNotNull(example, "example");
        this.example = example;
        return this;
    }

    public TermExample withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public TermExample withId(Optional<? extends Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public TermExample withTermBankId(long termBankId) {
        Utils.checkNotNull(termBankId, "termBankId");
        this.termBankId = termBankId;
        return this;
    }

    public TermExample withTermId(long termId) {
        Utils.checkNotNull(termId, "termId");
        this.termId = termId;
        return this;
    }

    public TermExample withType(TermExampleType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TermExample other = (TermExample) o;
        return 
            java.util.Objects.deepEquals(this.example, other.example) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.termBankId, other.termBankId) &&
            java.util.Objects.deepEquals(this.termId, other.termId) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            example,
            id,
            termBankId,
            termId,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TermExample.class,
                "example", example,
                "id", id,
                "termBankId", termBankId,
                "termId", termId,
                "type", type);
    }
    
    public final static class Builder {
 
        private String example;
 
        private Optional<? extends Long> id = Optional.empty();
 
        private Long termBankId;
 
        private Long termId;
 
        private TermExampleType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder example(String example) {
            Utils.checkNotNull(example, "example");
            this.example = example;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder termBankId(long termBankId) {
            Utils.checkNotNull(termBankId, "termBankId");
            this.termBankId = termBankId;
            return this;
        }

        public Builder termId(long termId) {
            Utils.checkNotNull(termId, "termId");
            this.termId = termId;
            return this;
        }

        public Builder type(TermExampleType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public TermExample build() {
            return new TermExample(
                example,
                id,
                termBankId,
                termId,
                type);
        }
    }
}

